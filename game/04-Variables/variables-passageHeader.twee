:: PassageHeader
<<if !$cheatReload>>
	<<set $passagePrev to $passage ? $passage : "none">>
<</if>>
<<set $passage to $passageOverride ? $passageOverride : passage()>>
<<set $tags to tags()>>
<<set l10nStrings.errorTitle = StartConfig.version + " Error" + ($passage ? ` (:: ${$passage})` : "")>>

<<if !["Start", "Start2", "Clothes Testing", "Renderer Test Page", "Tips"].includes($passage) && !$bypassHeader>>
	<<doVersionCheck>>
	<<if !$passage.includes(" Settings") and !$cheatReload>>
		<<if $passagePrev isnot $passage>>
			<<set $passageChangesCount to ($passageChangesCount || 0) + 1>>
		<</if>>
		<<set $passageCount to ($passageCount || 0) + 1>>
	<</if>>
<</if>>

<<unset $passageOverride>>
<<unset $bypassHeader>>
<<unset $cheatReload>>

:: Widgets VersionCheck [widget]
<<widget "doVersionCheck">>
	/* Run stuff on every save load */
	<<if onLoadUpdateCheck>>
		<<set $saveVersion to ($saveVersions ? $saveVersions.last() : "ancient")>> /*update save version */
	<</if>>

	/* Run stuff on every page refresh, save load, or version mismatch */
	<<if versionUpdateCheck or onLoadUpdateCheck or !$saveVersions or $saveVersions.last() isnot StartConfig.version>>
		<<set versionUpdateCheck to false>>
		<<set onLoadUpdateCheck to false>>

		/* convert game version to numeric value for use in <<backComp>> */
		<<set _version to (V.saveVersions?.last()?.match(/\d+/g) || [0]).map(Number).reduce((acc, num, index) => acc + num * Math.pow(100, 3 - index), 0)>>
		/* preserve prng so updater code won't alter which events are picked, don't forget to restore it
			it needs to use $ instead of _ because pre-weather save update code runs Engine.play() and that destroys temp variables
			and probably causes some other bad effects. honestly, version updater needs a major update itself. */
		<<set $prngpull to State.prng.pull>>
		<<backComp>>

		<<updatehistorycontrols>>
		<<set _preventUpdate to true>> /*prevent rewriting autosaves */
		<<set _saveLoaded to true>>
		<<set Time.set()>>

		<<setFont>>
		<<run zoom($options.zoom)>>
		<<run syncFavourites()>>
		<<run initCustomLenses()>>	/* push custom eyelenses inside setup.colours.eyes; on every load/refresh it needs to be done. */
		<<run syncDebugAddedEvents()>>
		<<run toggleConfirmDialogUponTabClose()>> /* enable/disable confirm dialog when user tries to close browser tab. based on V.options.confirmDialogUponTabClose */
		<<set State.prng.pull to $prngpull>> /* restore prng */
		<<unset $prngpull>>
	<</if>>

	/* Variables that you need to check on every passage */
	<<set $link_table to []>>
	<<set $map.hideLinksCheck to []>>
	/* Determine if the player is in a safe passage. Used to catch softlocks */
	<<if setup.majorAreas.includes($passage)>>
		<<set $safePassage to $passage>>
	<</if>>
<</widget>>
