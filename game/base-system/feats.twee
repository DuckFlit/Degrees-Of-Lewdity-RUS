:: Feats [widget]

<<widget "earnFeat">>
	<<if _args[0] and $feats.locked is false and $cheatdisable is "t" and $debug is 0 and $gamemode isnot "soft" and $alluremod gte 1>>
		<<if $feats.currentSave[_args[0]] is undefined and (!$feats.soft or !setup.feats[_args[0]].softLockable) and (!$feats.pregnancyLocked or !setup.feats[_args[0]].pregnancyLockable) and (!$feats.pregnancySillyLocked or !setup.feats[_args[0]].pregnancySillyLockable)>>
			<<set $feats.currentSave[_args[0]] to Date()>>

			<<displayFeat _args[0]>>
		<</if>>
	<</if>>
<</widget>>

<<widget "updateFeats">>
	<<if _passageCheck is "Start">>
		<<set _recalledFeats to JSON.parse(localStorage.getItem("dolFeats"))>>
	<</if>>
	<<if _recalledFeats is undefined or _recalledFeats is null>>
		<<set _recalledFeats to {points: 0}>>
	<</if>>
	<<set _points to 0>>
	<<set _keys to Object.keys(setup.feats)>>
	<<for _i to 0; _i lt _keys.length; _i++>>
		<<set _gainPoints to false>>
		<<if $feats.currentSave[_keys[_i]] isnot undefined>>
			<<set _gainPoints to true>>
			<<set _saveTime to getTimeNumber($feats.currentSave[_keys[_i]])>>
			<<set _allSaveTime to getTimeNumber($feats.allSaves[_keys[_i]])>>

			<<if _saveTime lt _allSaveTime>>
				<<set $feats.allSaves[_keys[_i]] to $feats.currentSave[_keys[_i]]>>
			<</if>>
		<</if>>
		<<set _allSaveTime to getTimeNumber($feats.allSaves[_keys[_i]])>>
		<<set _recalledSaveTime to getTimeNumber(_recalledFeats[_keys[_i]])>>

		<<if _allSaveTime gt _recalledSaveTime>>
			<<if _recalledFeats[_keys[_i]] isnot undefined>>
				<<set $feats.allSaves[_keys[_i]] to _recalledFeats[_keys[_i]]>>
				<<set _gainPoints to true>>
			<</if>>
		<<else>>
			<<if $feats.allSaves[_keys[_i]] isnot undefined>>
				<<set _gainPoints to true>>
			<</if>>
		<</if>>
		<<if _gainPoints is true>>
			<<set _points += setup.feats[_keys[_i]].difficulty>>
		<</if>>
	<</for>>
	<<set $feats.allSaves.points to _points>>

	<!--Store a record of which clothes the player has unlocked-->
	<<if _recalledFeats.specialClothes isnot undefined>>
		<<set $feats.allSaves.specialClothes to _recalledFeats.specialClothes>>
	<<elseif $feats.allSaves.specialClothes is undefined>>
		<<set $feats.allSaves.specialClothes to {}>>
	<</if>>
	<<if $specialClothes and $feats.locked is false and $cheatdisable is "t">>
		<<for $_label, $_value range $specialClothes>>
			<<if $_value is "unlocked">>
				<<set $feats.allSaves.specialClothes[$_label] to $_value>>
			<</if>>
		<</for>>
	<</if>>

	<<if _passageCheck is "Start">>
	<<else>>
		<<set localStorage.setItem("dolFeats",JSON.stringify($feats.allSaves))>>
	<</if>>
<</widget>>

<<widget "setupFeats">>
	<<if $featsBoosts is undefined or _args[0] is true>>
		<<set _keys to Object.keys($feats.allSaves)>>

		<<set _moneyFeats to _keys.count("Pocket Change") + _keys.count("Money Maker") + _keys.count("Tycoon") + _keys.count("Millionaire")>>
		<<set _moneyFeatsLimit to (_moneyFeats * 10)>>
		<<set _purityFeats to _keys.count("Angel") + _keys.count("Fallen Angel")>>

		<<set _newLife to _keys.count("Broodmother Host") + _keys.count("Top Broodmother Host")>>
		<<set _newLifeLimit to (_newLife * 20)>>

		<<set _earSlimeFeats to _keys.count("Ear Slime Lover") + _keys.count("Ear Slime Amalgam")>>

		<<set _tattoosFeats to _keys.count("A Living Canvas") + _keys.count("Billboard")>>

		<<set _sexToysFeats to _keys.count("Opened Pandoras Box") + _keys.count("Opened Pandoras Cocks")>>

		<<set $featsBoosts to {
			upgrades:{
				money:0,
				grades:0,
				skulduggery:0,
				dancing:0,
				swimming:0,
				athletics:0,
				tending:0,
				greenThumb:0,
				seduction:0,
				purity:0,
				impurity:0,
				newLife:0,
				aNewBestFriend:0,
				tattoos:0,
				defaultMoves: 0,
				randomClothing:0,
				specialClothing:0,
				sexToys:0,
			},
			upgradeDetails:{
				money:{cost:5, limit: _moneyFeatsLimit, minCount: 1, count:_moneyFeats, exclusive:""},
				grades:{cost:15, limit: 30, minCount: 1, count:_keys.count("Perfect Record"), exclusive:""},
				skulduggery:{cost:5, limit: 20, minCount: 1, count:_keys.count("Thief"), exclusive:""},
				dancing:{cost:5, limit: 20, minCount: 1, count:_keys.count("May I have this Dance?"), exclusive:""},
				swimming:{cost:5, limit: 20, minCount: 1, count:_keys.count("Aquanaut"), exclusive:""},
				athletics:{cost:5, limit: 20, minCount: 1, count:_keys.count("Swift"), exclusive:""},
				tending:{cost:5, limit: 20, minCount: 1, count:_keys.count("Green Fingered"), exclusive:""},
				greenThumb:{cost:40, limit: 40, minCount: 1, count:_keys.count("Green Fingered"), exclusive:"", hidden:true},
				seduction:{cost:5, limit: 20, minCount: 1, count:_keys.count("Seductress"), exclusive:""},
				purity:{cost:20, limit: 100, minCount: 2, count:_purityFeats, exclusive:"impurity"},
				impurity:{cost:20, limit: 100, minCount: 1, count:_keys.count("Demon"), exclusive:"purity"},
				newLife:{cost:20, limit: _newLifeLimit, minCount: 1, count:_newLife, exclusive:""},
				aNewBestFriend:{cost:10, limit: 10 * _earSlimeFeats, minCount: 1, count:_earSlimeFeats, exclusive:""},
				tattoos:{cost:5, limit: 25, minCount: 2, count:_tattoosFeats, exclusive:""},
				defaultMoves:{cost:5, limit: 25, minCount: 1, count:_keys.count("A New Life"), exclusive:""},
				randomClothing:{cost:1, limit: 20, minCount: 0, count:0, exclusive:""},
				specialClothing:{cost:40, limit: 40, minCount: 1, count:_keys.count("Curious Attire"), exclusive:""},
				sexToys:{cost:30, limit: 30 * _sexToysFeats, minCount: 1, count:_sexToysFeats, exclusive:""},
			},
			missing:{
				money:"Unlock this boost by obtaining the 'Pocket Change' feat",
				grades:"Unlock this boost by obtaining the 'Perfect Record' feat",
				skulduggery:"Unlock this boost by obtaining the 'Thief' feat",
				dancing:"Unlock this boost by obtaining the 'May I have this Dance?' feat",
				swimming:"Unlock this boost by obtaining the 'Aquanaut' feat",
				athletics:"Unlock this boost by obtaining the 'Swift' feat",
				tending:"Unlock this boost by obtaining the 'Green Fingered' feat",
				seduction:"Unlock this boost by obtaining the 'Seductress' feat",
				purity:"Unlock this boost by obtaining the 'Walk Like an Angel' and 'Falling, Falling, Falling...' feats",
				impurity:"Unlock this boost by obtaining the 'Devilish Looks' feat",
				newLife:"Unlock this boost by obtaining a hidden feat (" + setup.feats["Broodmother Host"].hint + ")",
				aNewBestFriend:"Unlock this boost by obtaining a hidden feat (" + setup.feats["Ear Slime Lover"].hint + ")",
				tattoos:"Unlock this boost by obtaining the  'Billboard' and 'A Living Canvas' feats",
				defaultMoves:"Unlock this boost by obtaining a hidden feat (" + setup.feats["A New Life"].hint + ")",
				randomClothing:"",
				specialClothing:"Unlock this boost by obtaining a hidden feat (" + setup.feats["Curious Attire"].hint + ")",
				sexToys:"Unlock this boost by obtaining a hidden feat (" + setup.feats["Opened Pandoras Box"].hint + ")",
			},
			name:{
				money:"Money",
				grades:"School Grades",
				skulduggery:"Skulduggery Grade",
				dancing:"Dancing Grade",
				swimming:"Swimming Grade",
				athletics:"Athletics Grade",
				tending:"Tending Grade",
				greenThumb:"Green Thumb trait",
				seduction:"Seduction grade",
				purity:"Daily purity",
				impurity:"Daily impurity",
				newLife:"New Life",
				aNewBestFriend:"A New Best Friend",
				tattoos:"Tattoos",
				defaultMoves:"Default Moves",
				randomClothing:"Random Clothing",
				specialClothing:"Special Clothing",
				sexToys:"Sex Toys",
			},
			pointsUsed: 0,
			clothingGender:"Either",
			clothingCustomColors:false,
			tattoos:{
				1:{bodypart:"Random",tattoo:"Random",pen:"Tattoo"},
				2:{bodypart:"Random",tattoo:"Random",pen:"Tattoo"},
				3:{bodypart:"Random",tattoo:"Random",pen:"Tattoo"},
				4:{bodypart:"Random",tattoo:"Random",pen:"Tattoo"},
				5:{bodypart:"Random",tattoo:"Random",pen:"Tattoo"},
			},
			sexToys:[{},{},{},{},{},{}],
			earSlimeType: "immaturePassive",
		}>>
	<</if>>
<</widget>>

<<widget "update_school_skills">>
	<<for _subject range ["science", "english", "maths", "history"]>>
		<<if V[_subject + 'trait'] gte 4>>
			<<set V[_subject] to 1000>>
		<<elseif V[_subject + 'trait'] gte 3>>
			<<set V[_subject] to 700>>
		<<elseif V[_subject + 'trait'] gte 2>>
			<<set V[_subject] to 400>>
		<<elseif V[_subject + 'trait'] gte 1>>
			<<set V[_subject] to 200>>
		<<else>>
			<<set V[_subject] to 100>>
		<</if>>
	<</for>>
<</widget>>

<<widget "applyFeatsBoost">>
	<<set _upgrades to $featsBoosts.upgrades>>
	<<set _details to $featsBoosts.upgradeDetails>>
	<<if $featsBoosts.pointsUsed gt 0>>
		<<earnFeat "A New Life">>
	<</if>>
	<<if _upgrades.money gt 0>>
		<<set $money += _upgrades.money * _details.money.count / _details.money.cost * 5000>>
	<</if>>
	<<if _upgrades.grades gt 0>>
		<<set $sciencetrait += _upgrades.grades / _details.grades.cost * 1>>
		<<set $englishtrait += _upgrades.grades / _details.grades.cost * 1>>
		<<set $mathstrait += _upgrades.grades / _details.grades.cost * 1>>
		<<set $historytrait += _upgrades.grades / _details.grades.cost * 1>>
		<<update_school_skills>>
	<</if>>
	<<if _upgrades.skulduggery gt 0>>
		<<set $skulduggery to _upgrades.skulduggery / _details.skulduggery.cost * 100>>
		<<set $skulduggeryday to _upgrades.skulduggery / _details.skulduggery.cost * 100>>
	<</if>>
	<<if _upgrades.dancing gt 0>>
		<<set $danceskill to _upgrades.dancing / _details.dancing.cost * 100>>
	<</if>>
	<<if _upgrades.tending gt 0>>
		<<set $tending += _upgrades.tending / _details.tending.cost * 100>>
	<</if>>
	<<if _upgrades.swimming gt 0>>
		<<set $swimmingskill += _upgrades.swimming / _details.swimming.cost * 100>>
	<</if>>
	<<if _upgrades.athletics gt 0>>
		<<set $athletics += _upgrades.athletics / _details.athletics.cost * 100>>
	<</if>>
	<<if _upgrades.seduction gt 0>>
		<<set $seductionskill to _upgrades.seduction / _details.seduction.cost * 100>>
	<</if>>
	<<if _upgrades.purity gt 0>>
		<<set $featsPurityBoost to _upgrades.purity / _details.purity.cost>>
	<</if>>
	<<if _upgrades.impurity gt 0>>
		<<set $featsPurityBoost to _upgrades.impurity / _details.impurity.cost * -1>>
	<</if>>
	<<if _upgrades.newLife gt 0 and $parasitepregdisable is "f">>
		<<impregnateParasite "tentacle" 400>>
		<<fertiliseParasites>>
		<<set _pregnancy to $sexStats.anus.pregnancy>>
		<<set _pregnancy.motherStatus to 2>>
		<<set $pregnancyStats.parasiteDoctorEvents to 2>>
		<<set _pregnancy.fetus[0].stats.gender to "Hermaphrodite">>
		<<if _upgrades.newLife is 40>>
			<<set _pregnancy.fetus[0].stats.growth to 7>>
			<<set _pregnancy.fetus[0].stats.speed to 54>>
		<</if>>
		<<set _pregnancy.fetus[0].stats.lastEgg to Math.floor(_pregnancy.fetus[0].stats.growth / 3)>>
	<</if>>
	<<if _upgrades.aNewBestFriend gt 0>>
		<<parasite left_ear slime>>
		<<switch $featsBoosts.earSlimeType>>
			<<case "immatureAggressive">>
				<<set $earSlime.corruption to 20>>
				<<set $earSlime.growth to 0>>
				<<set $earSlime.startedThreats to true>>
				<<set $earSlime.exhibitionism to 2>>
				<<set $earSlime.deviancy to 2>>
				<<set $earSlime.promiscuity to 2>>
			<<case "grownAggressive">>
				<<set $earSlime.corruption to 100>>
				<<set $earSlime.growth to 25>>
				<<set $earSlime.startedThreats to true>>
				<<set $earSlime.exhibitionism to 2>>
				<<set $earSlime.promiscuity to 2>>
				<<set $earSlime.deviancy to 2>>
			<<default>>
				<<set $earSlime.corruption to 0>>
		<</switch>>
	<</if>>
	<<if _upgrades.aNewBestFriend gt 10>>
		<<parasite right_ear slime>>
	<</if>>
	<<if _upgrades.greenThumb gt 0>>
		<<set $backgroundTraits.pushUnique("greenthumb")>>
		<<if $fertiliser>>
			<<set $fertiliser.current++>>
		<</if>>
	<</if>>
	<<if _upgrades.randomClothing gt 0>>
		<<set _clothingItems to _upgrades.randomClothing * 3>>
		<<set _options to {
			head:[],
			face:[],
			neck:[],
			hands:[],
			handheld:[],
			upper:[],
			lower:[],
			under_upper:[],
			under_lower:[],
			legs:[],
			feet:[]
		}>>
		<<set _equip to setup.clothingLayer.body>>
		<<for _i to 0; _i lt _equip.length; _i++>>
			<<set _slot to _equip[_i]>>
			<<for _j to 0; _j lt setup.clothes[_slot].length; _j++>>
				<<if (setup.clothes[_slot][_j].gender is "f" and $featsBoosts.clothingGender is "Male") or (setup.clothes[_slot][_j].gender is "m" and $featsBoosts.clothingGender is "Female")>>
					<<continue>>
				<</if>>
				<<if setup.clothes[_slot][_j].outfitSecondary isnot undefined>>
					<<continue>>
				<</if>>
				<<if setup.clothes[_slot][_j].shop.includes("clothing")>>
					<<run _options[_slot].push(_j)>>
				<</if>>
			<</for>>
		<</for>>
		<<set _equip to ["head","face","neck","upper","upper","upper","upper","upper","lower","lower","lower","lower","lower","under_upper","under_upper","under_upper","under_lower","under_lower","under_lower","hands","legs","feet"]>>
		<<for _i to 0; _i lt _clothingItems; _i++>>
			<<set _slot to _equip.random()>>
			<<set _index to _options[_slot].random()>>
			<<set _item to clone(setup.clothes[_slot][_index])>>
			<<if _item.colour_options.length gt 0>>
				<<set _colors to clone(_item.colour_options)>>
				<<if $featsBoosts.clothingCustomColors is false>>
					<<run _colors.delete("custom")>>
				<</if>>
				<<set _item.colour to _colors.random()>>
				<<if $featsBoosts.clothingCustomColors is true and _item.colour is "custom">>
					<<set _item.colourCustom to customColour(random(0,360), (random(0,20)/10), (random(5,40)/10), (random(0,20)/10), (random(0,100)/100))>>
				<</if>>
			<</if>>
			<<if _item.accessory_colour_options.length gt 0>>
				<<set _colors to clone(_item.accessory_colour_options)>>
				<<if $featsBoosts.clothingCustomColors is false>>
					<<run _colors.delete("custom")>>
				<</if>>
				<<set _item.accessory_colour to _colors.random()>>
				<<if $featsBoosts.clothingCustomColors is true and _item.accessory_colour is "custom">>
					<<set _item.accessory_colourCustom to customColour(random(0,360), (random(0,20)/10), (random(5,40)/10), (random(0,20)/10), (random(0,100)/100))>>
				<</if>>
			<</if>>

			<<set $_.outfitPrimary to _item.outfitPrimary>>
			<<set $_.items to {}>>
			<<run $_.items[_slot] to clone(_item)>>
			<<if $_.outfitPrimary isnot undefined>>
				<<for _labelf, _valuef range $_.outfitPrimary>>
					<<for _j to 0; _j lt setup.clothes[_labelf].length; _j++>>
						<<if _valuef is setup.clothes[_labelf][_j].name>>
							<<set $_.items[_labelf] to clone(setup.clothes[_labelf][_j])>>
							<<set $_.items[_labelf].colour to clone($_.items[_slot].colour)>>
							<<set $_.items[_labelf].accessory_colour to clone($_.items[_slot].accessory_colour)>>
							<<if $featsBoosts.clothingCustomColors is true and _item.colour is "custom">>
								<<set $_.items[_labelf].colourCustom to clone($_.items[_slot].colourCustom)>>
							<</if>>
							<<if $featsBoosts.clothingCustomColors is true and _item.accessory_colour is "custom">>
								<<set $_.items[_labelf].accessory_ColourCustom to clone($_.items[_slot].accessory_colourCustom)>>
							<</if>>
							<<break>>
						<</if>>
					<</for>>
				<</for>>
			<</if>>

			<<if $_.items[_slot] isnot undefined and $wardrobe[_slot].length lt $wardrobe.space>>
				<<for _labelf, _valuef range $_.items>>
					<<run $wardrobe[_labelf].push(_valuef)>>
				<</for>>
			<<else>>
				<<set _clothingItems += 1>>
			<</if>>
			<<unset _item>>
		<</for>>
	<</if>>

	<<if _upgrades.tattoos gt 0>>
		<<featsTattooOptions>>
		<<set _totalTattoos to $featsBoosts.upgrades.tattoos / $featsBoosts.upgradeDetails.tattoos.cost>>
		<<set _bodyPartOptions to ["forehead","left_cheek","right_cheek","left_shoulder","right_shoulder","back","breasts","left_bottom","right_bottom","left_thigh","right_thigh","pubic"]>>

		/*Remove non-random locations*/
		<<for _label, _value range $featsBoosts.tattoos>>
			<<if _value.tattoo isnot "Random">>
				<<set _bodyPart to _value.bodypart.toLowerCase()>>
				<<set _bodyPart to _bodyPart.replace(" ", "_")>>
				<<run _bodyPartOptions.delete(_bodyPart)>>
			<</if>>
		<</for>>

		/*Add non-random bodyparts*/
		<<for _label, _value range $featsBoosts.tattoos>>
			<<if _label gt _totalTattoos>>
				<<break>>
			<</if>>
			<<if _value.bodypart is "Random">>
				<<continue>>
			<</if>>
			<<set _bodyPart to _value.bodypart.toLowerCase()>>
			<<set _bodyPart to _bodyPart.replace(" ", "_")>>
			<<run _bodyPartOptions.delete(_bodyPart)>>
			<<if _value.tattoo is "Random">>
				<<set _tattoo to _featsTattooAll.pluck()>>
			<<else>>
				<<set _tattoo to _value.tattoo>>
			<</if>>
			<<for _label2, _value2 range setup.bodywriting>>
				<<if _value2.writing is _tattoo>>
					<<add_bodywriting _bodyPart _label2 `_value.pen.toLowerCase()`>>
					<<break>>
				<</if>>
			<</for>>
		<</for>>
		/*Add random bodyparts*/
		<<for _label, _value range $featsBoosts.tattoos>>
			<<if _label gt _totalTattoos>>
				<<break>>
			<</if>>
			<<if _value.bodypart isnot "Random">>
				<<continue>>
			<</if>>
			<<set _bodyPart to _bodyPartOptions.pluck()>>
			<<if _value.tattoo is "Random">>
				<<set _tattoo to _featsTattooAll.pluck()>>
			<<else>>
				<<set _tattoo to _value.tattoo>>
			<</if>>
			<<for _label2, _value2 range setup.bodywriting>>
				<<if _value2.writing is _tattoo>>
					<<add_bodywriting _bodyPart _label2 `_value.pen.toLowerCase()`>>
					<<break>>
				<</if>>
			<</for>>
		<</for>>
		<<bodywritingExposureCheck true>>
	<</if>>
	<<if _upgrades.defaultMoves gt 0>>
		<<set $maxDefaultActionSets to 2 + _upgrades.defaultMoves / _details.defaultMoves.cost>>
	<</if>>
	<<if _upgrades.specialClothing gt 0>>
		<<set _unlocked to $feats.allSaves.specialClothes>>
		<<specialClothesSetup>>
		<<for $_label, $_value range _unlocked>>
			<<set $specialClothes[$_label] to $_value>>
		<</for>>
	<</if>>
	<<if _upgrades.sexToys gt 0>>
		<<set _totalToys to _upgrades.sexToys / 10>>
		<<set _indexList to []>>
		<<run Object.values(setup.sextoys).forEach(toy => T.indexList.push(toy.index))>>
		<<for _i to 0; _i lt _totalToys; _i++>>
			<<if $featsBoosts.sexToys[_i].index isnot undefined and $featsBoosts.sexToys[_i].index isnot -1>>
				<<set _sexToyIndex to $featsBoosts.sexToys[_i].index>>
				<<set _sexToyColour to $featsBoosts.sexToys[_i].colour>>
				<<run _indexList.delete(_sexToyIndex)>>
			<<else>>
				<<set _sexToyIndex to _indexList.pluck()>>
			<</if>>
			<<run console.log(_sexToyColour)>>
			<<if !_sexToyColour or _sexToyColour is -1>>
				<<set _sexToyColourOptions to Object.values(setup.sextoys).find(toy => toy.index is _sexToyIndex).colour_options>>
				<<set _sexToyColour to _sexToyColourOptions[random(0, _sexToyColourOptions.length - 1)]>>
			<</if>>
			<<run sexShopOnBuyClick(_sexToyIndex, false, _sexToyColour, false)>>
			<<unset _sexToyColour>>
		<</for>>
	<</if>>
	/* Clean Up */
	<<run delete $featsBoosts.name>>
	<<run delete $featsBoosts.missing>>
	<<run delete $featsBoosts.clothingCustomColors>>
	<<run delete $featsBoosts.clothingGender>>
	<<run delete $featsBoosts.upgradeDetails>>
	<<run delete $featsBoosts.tattoos>>
	<<run delete $featsBoosts.sexToys>>
<</widget>>

<!--
Paste in the console to get the total number of vrelcoins
var count = 0;
for (var i = 0; i < Object.keys(setup.feats).length;i++){
	count += setup.feats[Object.keys(setup.feats)[i]].difficulty
}-->
