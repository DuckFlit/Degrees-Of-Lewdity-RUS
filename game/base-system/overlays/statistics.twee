:: Statistics [widget]
<<widget "statistics">>
	<<foldout false "_virginitiesFoldout">>
		<span class="gold">Virginities</span>
		<<run ["vaginal", "penile", "anal", "oral", "handholding", "kiss"].forEach(type => {
			if ($player.virginity[type] is true) {
				T[type + "VirginityColour"] = "gold";
			} else if (setup.loveInterestNpc.includes($player.virginity[type])) {
				T[type + "VirginityColour"] = "lewd";
				if ($player.virginityDetails and $player.virginityDetails?.[type]?.consensual is false) T[type + "VirginityColour"] = "red";
			} else if ($player.virginityDetails and $player.virginityDetails?.[type]?.consensual isnot undefined) {
				T[type + "VirginityColour"] = $player.virginityDetails?.[type]?.consensual ? "green" : "red";
			} else {
				T[type + "VirginityColour"] = "";
			}
		})>>
		<<if $player.vaginaExist or $player.virginity.vaginal isnot true>>
			Vaginal virginity: <span @class="_vaginalVirginityColour"><<print ($player.virginity.vaginal is true ? "Present" : "Taken by " + ($player.virginity.vaginal is false ? "unknown" : $player.virginity.vaginal))>></span>
			<<virginityToolTip $player.virginityDetails.vaginal $player.virginity.vaginal "pc" "vaginal">>
			<br>
		<</if>>
		<<if $player.penisExist or $player.virginity.penile isnot true>>
			Penile virginity: <span @class="_penileVirginityColour"><<print ($player.virginity.penile is true ? "Present" : "Taken by " + ($player.virginity.penile is false ? "unknown" : $player.virginity.penile))>></span>
			<<virginityToolTip $player.virginityDetails.penile $player.virginity.penile "pc" "penile">>
			<br>
		<</if>>

		Anal virginity: <span @class="_analVirginityColour"><<print ($player.virginity.anal is true ? "Present" : "Taken by " + ($player.virginity.anal is false ? "unknown" : $player.virginity.anal))>></span>
		<<virginityToolTip $player.virginityDetails.anal $player.virginity.anal "pc" "penile">>
		<br>
		Oral virginity: <span @class="_oralVirginityColour"><<print ($player.virginity.oral is true ? "Present" : "Taken by " + ($player.virginity.oral is false ? "unknown" : $player.virginity.oral))>></span>
		<<virginityToolTip $player.virginityDetails.oral $player.virginity.oral "pc" "oral">>
		<br>
		Handholding virginity: <span @class="_handholdingVirginityColour"><<print ($player.virginity.handholding is true ? "Present" : "Taken by " + ($player.virginity.handholding is false ? "unknown" : $player.virginity.handholding))>></span>
		<<virginityToolTip $player.virginityDetails.handholding $player.virginity.handholding "pc" "handholding">>
		<br>
		First kiss: <span @class="_kissVirginityColour"><<print ($player.virginity.kiss is true ? "Present" : "Taken by " + ($player.virginity.kiss is false ? "unknown" : $player.virginity.kiss))>></span>
		<<virginityToolTip $player.virginityDetails.kiss $player.virginity.kiss "pc" "kiss">>
		<br>
		<<if $temple_rank isnot undefined and $temple_rank isnot "prospective">>
			Temple vow: <<print ($player.virginity.temple is true ? "Unbroken" : "Broken by " + ($player.virginity.temple is false ? "unknown" : $player.virginity.temple))>>
			<br>
		<</if>>
		<br>
	<</foldout>>

	<<foldout false "_virginitiesTakenFoldout">>
		<span class="gold">Virginities taken</span>
		<!-- For the total virginities taken, iterate over every virginity type and sum up the number of entries belonging to each. -->
		<<set _total to 0>>
		<<run Object.values($virginTaken).forEach(type => _total += type.length)>>
		Total: _total
		<br>

		<!-- For each individual virginity type, the number is named and unnamed combined, but the list of names has unnamed npcs filtered out. -->
		<<set _vaginalNamed to clone($virginTaken.vaginal.filter(name => $NPCNameList.indexOf(name) isnot -1))>>
		<<set _penileNamed to clone($virginTaken.penile.filter(name => $NPCNameList.indexOf(name) isnot -1))>>
		<<set _analNamed to clone($virginTaken.anal.filter(name => $NPCNameList.indexOf(name) isnot -1))>>
		<<set _oralNamed to clone($virginTaken.oral.filter(name => $NPCNameList.indexOf(name) isnot -1))>>
		<<set _handholdingNamed to clone($virginTaken.handholding.filter(name => $NPCNameList.indexOf(name) isnot -1))>>
		<<set _kissNamed to clone($virginTaken.kiss.filter(name => $NPCNameList.indexOf(name) isnot -1))>>

		<<run ["vaginal", "penile", "anal", "oral", "handholding", "kiss"].forEach((virginity) => {
			const virginityNamed = `${virginity}Named`;
			T[virginityNamed] = []; /* _vaginalNamed, _penileNamed, ... */
			for (const name of V.virginTaken[virginity]) {
				if (!V.NPCNameList.includes(name)) return;
				const details = C.npc[name].virginityDetails?.[virginity];
				let colour = '';
				if (setup.loveInterestNpc.includes(name) && (!details || details.consensual !== false)) {
					colour = "lewd";
				} else if (details && details.consensual != null) {
					colour = details.consensual ? "green" : "red";
				}
				const nameText = `<span class="${colour}">${name}</span>`;
				const detailsArg = details
					? `\`C.npc['${name}'].virginityDetails.${virginity}\`` 
					: '';
				T[virginityNamed].push(`${nameText} <<virginityToolTip ${detailsArg} ${name} "npc" ${virginity}>>`);
			}
		})>>

		Vaginal: $virginTaken.vaginal.length<<print (_vaginalNamed.length gte 1 ? ", including: " + _vaginalNamed.join(', ') : "")>>
		<br>
		Penile: $virginTaken.penile.length<<print (_penileNamed.length gte 1 ? ", including: " + _penileNamed.join(', ') : "")>>
		<br>
		Anal: $virginTaken.anal.length<<print (_analNamed.length gte 1 ? ", including: " + _analNamed.join(', ') : "")>>
		<br>
		Oral: $virginTaken.oral.length<<print (_oralNamed.length gte 1 ? ", including: " + _oralNamed.join(', ') : "")>>
		<br>
		First hands held: $virginTaken.handholding.length<<print (_handholdingNamed.length gte 1 ? ", including: " + _handholdingNamed.join(', ') : "")>>
		<br>
		First kisses: $virginTaken.kiss.length<<print (_kissNamed.length gte 1 ? ", including: " + _kissNamed.join(', ') : "")>>
		<br><br>
	<</foldout>>

	<<foldout false "_jobsFoldout">>
		<span class="gold">Jobs</span>
		Danced: $dancestat
		<br>
		Drinks served: $drinksservedstat
		<br>
		Tables served: $tablesservedstat
		<br>
		Whored yourself: $prostitutionstat
		<br>
		<<if $gamemode isnot "soft">>
			Forcibly whored out: $forcedprostitutionstat
			<br>
		<</if>>
		<<if statChange.timeTrackingTotal("docks")>>
			Hours worked on the docks: <<print statChange.timeTrackingTotal("docks")>>
			<br>
		<</if>>
		Buns sold at the cafe: $bunstat
		<br>
		Most "cream" produced: <<print parseFloat($creamstat.toFixed(1))>> mL
		<br>
		Smugglers intercepted: $smuggler_stolen_stat
		<br>
		Tasks performed at the pub: $pub_task_stat
		<br>
		Produce sold: $produce_sold
		<br>
		<<if $farmersProduce>>
			Produce sold in bulk: $farmersProduce.totalSold
			<br>
		<</if>>
		Fertiliser used: $fertiliser.used
		<br>
		Hours worked on a farm: <<print Math.trunc($farm_shift / 60)>>
		<br>
		Cattle milked: $cattle_milked
		<br>
		Clients serviced as a masseur: $masseur_stat
		<br>
		Wild plants picked: $wild_plant_stat
		<br>
		Aphrodisiacs sold: $stat_aphrodisiacs_sold
		<br>
		<<if $brothelVending and $brothelVending.total>>
			Products sold at the brothel: $brothelVending.total
			<br>
		<</if>>
		<<if $confessionsDone>>
			Sins confessed: $confessionsDone
			<br>
		<</if>>
		<<if $confessionsTaken>>
			Confessions taken: $confessionsTaken
			<br>
		<</if>>
		<br>
	<</foldout>>

	<<foldout false "_sexFoldout">>
		<span class="gold">Sex</span>
		Number of orgasms you've experienced: $orgasmstat
		<br>
		Last orgasm: <<statisticsTimeCompare $orgasmTimeStat>>
		<br>
		<<if $ruinedOrgasmStat>>
			Number of ruined orgasms you've experienced: $ruinedOrgasmStat
			<br>
			Last ruined orgasm: <<statisticsTimeCompare $ruinedOrgasmTimeStat>>
			<br>
		<</if>>
		<<if $asphyxiaLvl gte 2>>
			Orgasms while being choked: $chokeorgasm
			<br>
		<</if>>
		<<if $player.penisExist or $penilestat>>
			Penetrated others: $penilestat
			<br>
			Last penetrated others: <<statisticsTimeCompare $penileTimeStat>>
			<br>
		<</if>>
		<<if $straponstat>>
			Penetrated others with a strapon: $straponstat
			<br>
		<</if>>
		<<if $player.penisExist or $penileejacstat>>
			Ejaculated in others: $penileejacstat
			<br>
			Last ejaculated in others: <<statisticsTimeCompare $penileEjacTimeStat>>
			<br>
		<</if>>
		<<if $player.vaginaExist>>
			Vaginally penetrated: $vaginalstat
			<br>
			Last vaginally penetrated: <<statisticsTimeCompare $vaginalTimeStat>>
			<br>
			Ejaculated in vaginally: $vaginalejacstat
			<br>
			Last ejaculated in vaginally: <<statisticsTimeCompare $vaginalEjacTimeStat>>
			<br>
		<</if>>
		<<if $analdisable is "f">>
			Anally penetrated: $analstat
			<br>
			Last anally penetrated: <<statisticsTimeCompare $analTimeStat>>
			<br>
			Ejaculated in anally: $analejacstat
			<br>
			Last ejaculated in anally: <<statisticsTimeCompare $analEjacTimeStat>>
			<br>
		<</if>>
		Orally penetrated: $oralstat
		<br>
		Ejaculated in orally: $oralejacstat
		<br>
		<<if $cunnilingusstat>>
			Cunnilingus: $cunnilingusstat
			<br>
		<</if>>
		<<if $cunnilingusejacstat>>
			Cunnilingus ejaculations: $cunnilingusejacstat
			<br>
		<</if>>
		Semen swallowed: <<print Math.floor($semenswallowedstat)>> mL
		<<if $bestialitydisable is "f">>
			<br>
			Animal semen swallowed: <<print Math.floor($animalsemenswallowedstat)>> mL
		<</if>>
		<br>
		Handjobs given: $handstat
		<br>
		Handjob ejaculations: $handejacstat
		<br>
		<<if $footdisable is "f">>
			Footjobs given: $feetstat
			<br>
			Footjob ejaculations: $feetejacstat
			<br>
		<</if>>
		Thighjobs given: $thighstat
		<br>
		Thighjob ejaculations: $thighejacstat
		<br>
		Chestjobs given: $cheststat
		<br>
		Chestjob ejaculations: $chestejacstat
		<br>
		Buttjobs given: $bottomstat
		<br>
		Buttjob ejaculations: $bottomejacstat
		<br>
		Hair ejaculated on: $hairejacstat
		<br>
		Tummy ejaculated on: $tummyejacstat
		<br>
		Neck ejaculated on: $neckejacstat
		<br>
		<<if $player.vaginaExist>>
			Pussy ejaculated on: $vaginalentranceejacstat
			<br>
		<</if>>
		Face ejaculated on: $faceejacstat
		<br>
		Total times you've been ejaculated on or in: $ejacstat
		<br>
		Gloryholes serviced: $gloryholestat
		<br>
		Masturbated: $masturbationstat
		<br>
		Last masturbated: <<statisticsTimeCompare $masturbationTimeStat>>
		<br>
		Masturbated to orgasm: $masturbationorgasmstat
		<br>
		Last masturbated to orgasm: <<statisticsTimeCompare $masturbationOrgasmTimeStat>>
		<br>
		Minutes spent masturbating: <<print Math.trunc($secondsSpentMasturbating / 60)>>
		<br>
		<<if $breastfeedingdisable is "f">>
			Breast milk drank: <<print Math.floor($milk_drank_stat)>> mL
			<br>
			Breast milk produced: <<print Math.floor($milk_produced_stat)>> mL
			<br>
		<</if>>
		<<if $plantdisable is "f">>
			Nectar drank: <<print Math.floor($nectar_drank_stat)>> mL
			<br>
		<</if>>
		<<if $player.penisExist or $semen_produced_stat>>
			Semen produced: <<print Math.floor($semen_produced_stat)>> mL
			<br>
		<</if>>
		<<if $player.vaginaExist>>
			Lewd fluid produced: <<print Math.floor($lube_produced_stat)>> mL
			<br>
		<</if>>
		<<if $player.penisExist or $breastfeedingdisable is "f" or $fluid_forced_stat>>
			Fluid forcibly milked: <<print Math.floor($fluid_forced_stat)>> mL
			<br>
		<</if>>
		<<if $knot_stat isnot undefined>>
			Knotted: $knot_stat
			<br>
		<</if>>
		<<if $sextoystat isnot undefined>>
			Sex toys used on others: $sextoystat
		<</if>>
		<br>
		<<if $analdoubledisable is "f" and $analdoublestat isnot undefined>>
			Double anally penetrated: $analdoublestat
			<br>
		<</if>>
		<<if $vaginaldoubledisable is "f" and $vaginaldoublestat isnot undefined>>
			Double vaginally penetrated: $vaginaldoublestat
			<br>
		<</if>>
		<<if $watersportsdisable is "f">>
			Urinated on: $urinestat
			<br>
		<</if>>
		<br>
	<</foldout>>

	<<if $gamemode isnot "soft">>
		<<foldout false "_violenceFoldout">>
			<span class="gold">Violence</span>
			Molested: $moleststat
			<br>
			Last molested: <<statisticsTimeCompare $molestTimeStat>>
			<br>
			Raped: $rapestat
			<br>
			Last raped: <<statisticsTimeCompare $rapeTimeStat>>
			<br>
			<<if $bestialitydisable is "f">>
				Raped by animals: $beastrapestat
				<br>
			<<else>>
				Raped by monster people: $beastrapestat
				<br>
			<</if>>
			<<if $tentacledisable is "f">>
				Raped by tentacle monsters: $tentaclerapestat
				<br>
			<</if>>
			<<if $voredisable is "f">>
				Swallowed: $swallowedstat
				<br>
			<</if>>
			<<if $parasitedisable is "f">>
				Parasites hosted: $parasitestat
				<br>
			<</if>>
			Been hit: $hitstat
			<br>
			Hit others: $attackstat
			<br>
			Pepper spray used: $spraystat
			<br>
			<<if C.npc.Eden.init>>
				Practise shots fired with Eden: $stat_shoot
				<br>
			<</if>>
			Machines disabled: $machine_stat
			<br>
			<<if $lurkerdisable is "f">>
				Lurkers captured: $stat_lurkers_captured
				<br><br>
			<</if>>
		<</foldout>>
	<</if>>

	<<foldout false "_datesFoldout">>
		<span class="gold">Dates</span>
		<<if $dateCount.Total lte 0>>
			You haven't gone on any dates!<br>
		<<else>>
			Total Dates: $dateCount.Total
			<br>
			<<if $dateCount.Robin gte 1>>
				Dates with Robin: $dateCount.Robin
				<br>
			<</if>>
			<<if $dateCount.Whitney gte 1>>
				Dates with Whitney: $dateCount.Whitney
				<br>
			<</if>>
			<<if $dateCount.Kylar gte 1>>
				Dates with Kylar: $dateCount.Kylar
				<br>
			<</if>>
			<<if $dateCount.Eden gte 1>>
				Dates with Eden: $dateCount.Eden
				<br>
			<</if>>
			<<if $dateCount.Avery gte 1>>
				Dates with Avery: $dateCount.Avery
				<br>
			<</if>>
			<<if $dateCount.BlackWolfHunts gte 1>>
				Hunts with the Black Wolf: $dateCount.BlackWolfHunts
				<br>
			<</if>>
			<<if $dateCount.GreatHawkHunts gte 1>>
				Hunts with the Great Hawk: $dateCount.GreatHawkHunts
				<br>
			<</if>>
			<<if $dateCount.GreatHawkCasual gte 1>>
				Casual flights with the Great Hawk: $dateCount.GreatHawkCasual
				<br>
			<</if>>
			<<if $dateCount.Alex gte 1>>
				Dates with Alex: $dateCount.Alex
				<br>
			<</if>>
			<<if $dateCount.Sydney gte 1>>
				Dates with Sydney: $dateCount.Sydney
				<br>
			<</if>>
		<</if>>
		<br>
	<</foldout>>

	<<foldout false "_pregnancyFoldout">>
		<span class="gold">Pregnancy</span>
		Times given birth: <<print playerNormalPregnancyTotal()>>
		<br>
		<<if $pregnancyStats.playerVirginBirths.length>>
			Total virgin births: <<print $pregnancyStats.playerVirginBirths.length>>
			<br>
		<</if>>
		Total number of children you gave birth to: <<print $pregnancyStats.playerChildren>>
		<br>
		Total number of children you know you fathered: <<print $pregnancyStats.npcChildren>>
		<br>
		Total days knowingly being pregnant: <<print Math.floor($pregnancyStats.totalDaysPregnancyKnown)>>
		<br>
		Total number of human children: <<print $pregnancyStats.humanChildren>>
		<br>
		Total number of wolf children: <<print $pregnancyStats.wolfChildren>>
		<br>
		Total number of hawk children: <<print $pregnancyStats.hawkChildren>>
		<br>
		Children interactions: <<print $pregnancyStats.childInteractions>>
		<br>
		<!-- ToDo: Pregnancy - Move outside of commented area when interactions are added
		Breastfed interactions: <<print $pregnancyStats.childBreastfedInteractions>>
		<br>
		Bottlefed interactions: <<print $pregnancyStats.childBottlefedInteractions>>
		<br>
		First Word interaction: <<print $pregnancyStats.childFirstWordInteractions>>
		<br>
		-->
		Bottles of milk given to the orphanage: <<print $pregnancyStats.orphanageMilkBottlesTotal>>
		<br>
		After Morning pills taken: <<print $pregnancyStats.aftermorningpills>>
		<br>
		Pregnancy tests taken: <<print $pregnancyStats.pregnancyTestsTaken>>
		<br>
		<<if $player.vaginaExist>>
			Vaginal Parasite Born: <<print $sexStats.vagina.pregnancy.parasiteBirthEvents>>
			<br>
		<</if>>
		Anal Parasite Born: <<print $sexStats.anus.pregnancy.parasiteBirthEvents>>
		<br><br>
	<</foldout>>

	<<foldout false "_gamblingFoldout">>
		<span class="gold">Gambling</span>
		Games of blackjack played: $estatePersistent.totalGamesPlayed
		<br>
		Games of blackjack played with betting: $estatePersistent.totalGamesPlayedWithBetting
		<br>
		Rounds of blackjack won/lost/tied: $estatePersistent.totalRoundsWon/$estatePersistent.totalRoundsLost/$estatePersistent.totalRoundsTied
		<br>
		Rounds of blackjack won/lost/tied (with bets): $estatePersistent.totalBetRoundsWon/$estatePersistent.totalBetRoundsLost/$estatePersistent.totalBetRoundsTied
		<br>
		Money won in blackjack: <<printmoney $estatePersistent.totalBetMoneyMade>>
		<br>
		Money lost in blackjack: <<printmoney $estatePersistent.totalBetMoneyLost>>
		<br>
		Money confiscated in blackjack: <<printmoney $estatePersistent.totalMoneyConfiscated>>
		<br>
		Tips received in blackjack: <<printmoney $estatePersistent.totalTipMoneyMade>>
		<br>
		Times caught cheating: $estatePersistent.totalCaughtCheating
		<br>
		Highest blackjack streak: $estatePersistent.winStreakHighScore
		<<if $blackjack_played gt 0 or $blackjack_won gt 0>>
			<br>
			Rounds of old blackjack played/won: $blackjack_played/$blackjack_won
		<</if>>
		<<if $blackjack_streak_high and $blackjack_streak_high gt 0>>
			<br>
			Highest old blackjack streak: $blackjack_streak_high
		<</if>>
		<br><br>
	<</foldout>>

	<<foldout false "_moneyFoldout">>
		<span class="gold">Money</span>
		Notes <mouse class="tooltip linkBlue">(?)<span>Adding too many extra colums may make it harder to read on some devices. Many of these were not tracked at all before version '0.5.2.x' and so will be inaccurate.<<if Object.keys($timeStats).length>> Hour rates cannot be easily used to track every state and so most will just be "N/A".<</if>></span></mouse>
		<br>
		<<set [_moneyKeys, _moneyStats, _moneyStatsTotal] to moneyStatsProcess(clone($moneyStats))>>
		<<if $moneyStatsSnapshot?.money>>
			<<set [_moneySnapshotKeys, _moneyStatsSnapshot, _moneyStatsSnapshotTotal] to moneyStatsProcess(clone($moneyStatsSnapshot.money))>>
		<</if>>
		<div id="moneyStatsDiv">
			<<moneyStats>>
		</div>
	<</foldout>>

	<<foldout false "_miscFoldout">>
		<span class="gold">Miscellaneous</span>
		<<if $gamemode isnot "soft">>
			Rescued: $rescued
			<br>
		<</if>>
		Clothing stripped: $clothesstripstat
		<br>
		Clothing ruined: $clothesruinstat
		<br>
		Passed out: $passoutstat
		<br>
		Last passed out: <<statisticsTimeCompare $passoutTimeStat>>
		<br>
		Distinctions won: $distinction_stat
		<br>
		Hours slept: $sleepStat
		<br>
		Underwear stolen: $stat_panties_stolen
		<br>
		Sentenced with community service: $stat_police.community
		<br>
		Sentenced with the pillory:	$stat_police.pillory
		<br>
		Days in prison: $stat_police.prison
		<br>
		Hypnotised: $hypnotised
		<<if $wraith.possessCount>>
			<br>
			Possessed: $wraith.possessCount
		<</if>>
		<br>
		School lessons missed: <<print Object.values($schoolLessonsMissed).reduce((x, y) => x + y)>>
		<mouse class="tooltip linkBlue">(?)<span>Bad math in earlier versions of the game may mean these stats are inaccurate before version '0.4.0.0'</span></mouse>
		<br>
		Science lessons missed: $schoolLessonsMissed.science
		<br>
		Maths lessons missed: $schoolLessonsMissed.maths
		<br>
		English lessons missed: $schoolLessonsMissed.english
		<br>
		History lessons missed: $schoolLessonsMissed.history
		<br>
		Swimming lessons missed: $schoolLessonsMissed.swimming
		<br>
		<<if $earSlimeDaysStat>>
			Days with an ear slime: $earSlimeDaysStat
			<br>
		<</if>>
		<<if $earSlime.days>>
			Days with the current ear slime: $earSlime.days
			<br>
		<</if>>
		<<if $earSlimePassiveDaysStat>>
			Most days with a passive ear slime: $earSlimePassiveDaysStat
			<br>
		<</if>>
		<<if $whitney_smoke gte 1>>
			Cigarettes smoked: $whitney_smoke
			<br>
		<</if>>
		<<if $bird and $bird.lurkersEaten>>
			Lurkers eaten: $bird.lurkersEaten
			<br>
		<</if>>
		Total paid to Bailey: <<printmoney `$moneyStats.baileyRent?.spent or 0`>>
		<mouse class="tooltip linkBlue">(?)<span>Not tracked in versions '0.4.5.X' and older</span></mouse>
		<br>
		<<if $baileyRefusedToPayTotal>>
			Total in missed payments to Bailey: <<printmoney $baileyRefusedToPayTotalStat "red">>
			<mouse class="tooltip linkBlue">(?)<span>Not tracked in versions '0.4.5.X' and older</span></mouse>
			<br>
		<</if>>
		<br>
	<</foldout>>


	<<foldout false "_saveFoldout">>
		<span class="gold">Save Game Details</span>
		<<if $passageCount>>
			Total Passages Count: $passageCount
			<mouse class="tooltip linkBlue">(?)<span>Total number of times a new passage has been loaded (Clicking on links in most cases). Passages such as the settings are excluded. Not tracked in versions '0.3.12.X' and older</span></mouse>
			<br>
		<</if>>
		<<if $passageChangesCount>>
			Total Passage Changes Count: $passageChangesCount
			<mouse class="tooltip linkBlue">(?)<span>Total number of times a new passage has changed (Clicking on links in most cases). Passages such as the settings are excluded. Not tracked in versions '0.3.12.X' and older</span></mouse>
			<br>
		<</if>>
		<<if $saveDetails isnot undefined>>
			Normal saves count: <<print $saveDetails.slot.count>>
			<br>
			Exported saves count: <<print $saveDetails.exported.count>>
			<br>
			Auto saves count: <<print $saveDetails.auto.count>>
			<br>
			Times Loaded: <<print $saveDetails.loadCount || 0>>
			<mouse class="tooltip linkBlue">(?)<span>Total number of times a save has been loaded, does not track repeated load times of the same save. Not tracked in versions '0.3.12.X' and older</span></mouse>
			<br>
			Play Time: <<print msToTime(($saveDetails.playTime ? $saveDetails.playTime : 0) + ($saveDetails.loadTime ? new Date() - $saveDetails.loadTime : 0))>>
			<mouse class="tooltip linkBlue">(?)<span>Formatted into 'h:mm:ss'. Be aware that leaving the game for hours alone, then saving will have its time tracked. To avoid, save the game before ending play and then load the save when you resume play. Not tracked in versions '0.3.13.X' and older</span></mouse>
			<br>
		<</if>>
		<<if $saveVersions isnot undefined>>
			Versions Played On:
			<br>
			<<for _i to 0; _i lt $saveVersions.length; _i++>>
				<<if _i gt 0>>
					<<if $saveVersions[_i].split(".")[2] is $saveVersions[_i - 1].split(".")[2]>>
						--
					<<else>>
						<br>
					<</if>>
				<</if>>
				$saveVersions[_i]
			<</for>>
			<br>
		<</if>>
		<<if $saveVersion>>
			Save loaded from version: $saveVersion
		<</if>>
	<</foldout>>
<</widget>>

<<widget "extraStatisticsWarning">>
	<<if $options.skipStatisticsConfirmation is undefined>><<set $options.skipStatisticsConfirmation to false>><</if>>

	<h3>Extra Statistics</h3>

	<div id="spoilerWarning">
		Are you sure you want to see these? They may contain spoilers!
		<br>
		<<link "Yes">>
			<<replace #customOverlayContent>><<extraStatistics>><</replace>>
		<</link>>
		&nbsp;&nbsp;&nbsp;<label><<checkbox "$options.skipStatisticsConfirmation" false true autocheck>> Don't Show Again</label>
		<!-- ignore the nbsp's, they're just for formatting -->
	</div>
<</widget>>

<<widget "extraStatistics">>
	<div id="spoilerWarningConfirmed">
		<<foldout false "_stateFoldout">>
			<span class="gold">State</span>
			Pain: <<print Math.trunc($pain)>>
			<br>
			Arousal: <<print Math.trunc($arousal)>>
			<br>
			Fatigue: <<print Math.trunc($tiredness)>>
			<br>
			Stress: <<print Math.trunc($stress)>>
			<br>
			Trauma: <<print Math.trunc($trauma)>>
			<br>
			Control: <<print Math.trunc($control)>>
			<br>
			Allure: <<print Math.trunc($allure)>>
			<br>
			Alcohol: <<print Math.trunc($drunk)>>
			<br>
			Drugs: <<print Math.trunc($drugged)>>
			<br>
			Hallucinogens: <<print Math.trunc($hallucinogen)>>
			<br><br>
		<</foldout>>

		<<foldout false "_charFoldout">>
			<span class="gold">Characteristics</span>
			Purity: <<print Math.trunc($purity)>>
			<br>
			Beauty: <<print Math.trunc($beauty)>>
			<br>
			Physique: <<print Math.trunc($physique)>>
			<br>
			Willpower: <<print Math.trunc($willpower)>>
			<br>
			Awareness: <<print Math.trunc($awareness)>>
			<br>
			Promiscuity: <<print Math.trunc($promiscuity)>>
			<br>
			Exhibitionism: <<print Math.trunc($exhibitionism)>>
			<br>
			Deviancy: <<print Math.trunc($deviancy)>>
			<br>
			Corruption: <<print Math.trunc($earSlime.corruption)>>
			<br>
			<<if $earSlime.growth>>
				Growth: <<print Math.trunc($earSlime.growth)>>
				<br>
			<</if>>
			<<if $temple_rank is "initiate" or $temple_rank is "monk" or $temple_rank is "priest">>
				Grace: <<print Math.trunc($grace)>>
				<br>
			<</if>>
			Submissiveness: <<print Math.trunc($submissive)>>
			<br>
			Masochism: <<print Math.trunc($masochism)>>
			<br>
			Sadism: <<print Math.trunc($sadism)>>
			<br>
			Crossdresser progression:
			<<if $crossdressingTrait isnot undefined>>
				<<print Math.trunc($crossdressingTrait)>> %
			<<else>>
				0
			<</if>>
			<br><br>
			Sensitivities:
			<mouse class="tooltip linkBlue">(?)<span>These are arousal multipliers applied when that part of the body is stimulated.</span></mouse>
			<ul style="margin-top:0px;margin-left:-5px;">
				<li>Mouth: <<print $mouthsensitivity.toFixed(2)>></li>
				<li>Breast: <<print $breastsensitivity.toFixed(2)>></li>
				<li>Genital: <<print $genitalsensitivity.toFixed(2)>></li>
				<li>Bottom: <<print $bottomsensitivity.toFixed(2)>></li>
			</ul>
			Breast Growth: <<print Math.trunc(100 - ($breastgrowthtimer / 10))>>%
			<mouse class="tooltip linkBlue">(?)<span>Reach 100% or above to grow, 0% or below to shrink.</span></mouse>
			<br>
			Breasts can grow: <<print $player.breastsize lt $breastsizemax>>
			<<if $player.breastsize is $breastsizemax>>
				<mouse class="tooltip linkBlue">(?)<span>At max size.</span></mouse>
			<</if>>
			<br>
			Breasts can shrink: <<print $player.breastsize gt $breastsizemin>>
			<<if $player.breastsize is $breastsizemin>>
				<mouse class="tooltip linkBlue">(?)<span>At min size.</span></mouse>
			<</if>>
			<br>
			Lactating: <<print ($lactating is 1 ? "True" : "False")>>
			<br>
			<<if $lactating is 1>>
				Milk amount: <<print Math.trunc($milk_amount)>>
				<br>
				Milk volume: <<print Math.trunc($milk_volume)>>
				<br>
			<</if>>
			<<if $player.penisExist>>
				<<if $player.penissize gte -1>>
					<<set $_penisGrowthMin to 0>>
				<<else>>
					<<set $_penisGrowthMin to -400>>
				<</if>>
				<<if $player.penissize gt 0>>
					<<set $_penisGrowthMax to 1000>>
				<<elseif $player.penissize is 0>>
					<<set $_penisGrowthMax to 1200>>
				<<else>>
					<<set $_penisGrowthMax to 1500>>
				<</if>>
				<<set $_penisgrowthtimer to $penisgrowthtimer>>
				<<if $_penisGrowthMin lt 0>>
					<<set $_penisGrowthMax -= $_penisGrowthMin>>
					<<set $_penisgrowthtimer -= $_penisGrowthMin>>
				<</if>>
				<br>
				Penis Growth: <<print Math.trunc(100 - ($_penisgrowthtimer / $_penisGrowthMax * 100))>>%
				<mouse class="tooltip linkBlue">(?)<span>Reach 100% or above to grow, 0% or below to shrink.</span></mouse>
				<br>
				<<if $sexStats && $sexStats.pills>>
					Penis can grow: <<print $player.penissize lt $penissizemax and ($player.penissize gte -1 or $sexStats.pills["pills"]["penis growth"].overdose - $sexStats.pills["pills"]["penis reduction"].overdose - ($worn.genitals.type.includes("shrinking") ? 20 : 0) gte 20)>>
					<<if $player.penissize is -2 and $sexStats.pills["pills"]["penis growth"].overdose - $sexStats.pills["pills"]["penis reduction"].overdose - ($worn.genitals.type.includes("shrinking") ? 20 : 0) lt 20>>
						<mouse class="tooltip linkBlue">(?)<span>Need to overdose on growing pills or use an urchin penis parasite.</span></mouse>
					<<elseif $player.penissize is $penissizemax>>
						<mouse class="tooltip linkBlue">(?)<span>At max size.</span></mouse>
					<</if>>
					<br>
					Penis can shrink: <<print $player.penissize gt $penissizemin and ($player.gender isnot "f" or $player.penissize gt 0) and ($player.penissize gte 0 or $sexStats.pills["pills"]["penis growth"].overdose - $sexStats.pills["pills"]["penis reduction"].overdose - ($worn.genitals.type.includes("shrinking") ? 20 : 0) lte -20)>>
					<<if $player.gender is "f" && $player.penissize is 0>>
						<mouse class="tooltip linkBlue">(?)<span>At min size for the parasite penis.</span></mouse>
					<<elseif $player.penissize is -1 and $sexStats.pills["pills"]["penis growth"].overdose - $sexStats.pills["pills"]["penis reduction"].overdose - ($worn.genitals.type.includes("shrinking") ? 20 : 0) gt -20>>
						<mouse class="tooltip linkBlue">(?)<span>Need to overdose on shrinking pills or use a slime penis parasite.</span></mouse>
					<<elseif $player.penissize is $penissizemin>>
						<mouse class="tooltip linkBlue">(?)<span>At min size.</span></mouse>
					<</if>>
					<br>
				<</if>>
				Semen amount: <<print Math.trunc($semen_amount)>>
				<br>
				Semen volume: <<print Math.trunc($semen_volume)>>
				<br>
			<</if>>
			<br>
			Bottom Growth: <<print Math.trunc(100 - ($bottomgrowthtimer / 10))>>%
			<mouse class="tooltip linkBlue">(?)<span>Reach 100% or above to grow, 0% or below to shrink.</span></mouse>
			<br>
			Bottom can grow: <<print $player.bottomsize lt $bottomsizemax>>
			<<if $player.bottomsize is $bottomsizemax>>
				<mouse class="tooltip linkBlue">(?)<span>At max size.</span></mouse>
			<</if>>
			<br>
			Bottom can shrink: <<print $player.bottomsize gt $bottomsizemin>>
			<<if $player.bottomsize is $bottomsizemin>>
				<mouse class="tooltip linkBlue">(?)<span>At min size.</span></mouse>
			<</if>>
			<br><br>
		<</foldout>>

		<<foldout false "_clothesFoldout">>
			<span class="gold">Clothes</span>
			<<if $worn.upper.name isnot "naked">>
				Upper wetness: <<print Math.trunc($upperwet)>>
				<br>
				Upper integrity: <<print Math.trunc($worn.upper.integrity)>>
				<br>
			<</if>>
			<<if $worn.lower.name isnot "naked">>
				Lower wetness: <<print Math.trunc($lowerwet)>>
				<br>
				Lower integrity: <<print Math.trunc($worn.lower.integrity)>>
				<br>
			<</if>>
			<<if $worn.under_upper.name isnot "naked">>
				Under Upper wetness: <<print Math.trunc($underupperwet)>>
				<br>
				Under Upper integrity: <<print Math.trunc($worn.under_upper.integrity)>>
				<br>
			<</if>>
			<<if $worn.under_lower.name isnot "naked">>
				Under Lower wetness: <<print Math.trunc($underlowerwet)>>
				<br>
				Under Lower integrity: <<print Math.trunc($worn.under_lower.integrity)>>
				<br>
			<</if>>
			<<if $worn.genitals.name isnot "naked">>
				<<print setup.clothes.genitals[clothesIndex('genitals',$worn.genitals)].name_cap>> integrity: <<print Math.trunc($worn.genitals.integrity)>>
				<br>
			<</if>>
			<br>
		<</foldout>>

		<<foldout false "_socialFoldout">>
			<span class="gold">Social</span>
			School status: <<print Math.trunc($cool)>>
			<br>
			Delinquency: <<print Math.trunc($delinquency)>>
			<br>
			Detention: <<print Math.trunc($detention)>>
			<br>
			Crime: <<print Math.trunc(crimeSumCurrent())>>
			<br>
			Orphanage hope: <<print Math.trunc($orphan_hope)>>
			<br>
			Orphanage rebelliousness: <<print Math.trunc($orphan_reb)>>
			<br>
			<<if $dockwork is 2>>
				Docks status: <<print Math.trunc($dockstatus)>>
				<br>
			<</if>>
			Sex fame: <<print Math.trunc($fame.sex)>>
			<br>
			Prostitution fame: <<print Math.trunc($fame.prostitution)>>
			<br>
			Rape fame: <<print Math.trunc($fame.rape)>>
			<br>
			Bestiality fame: <<print Math.trunc($fame.bestiality)>>
			<br>
			Exhibitionism fame: <<print Math.trunc($fame.exhibitionism)>>
			<br>
			Pregnancy fame: <<print Math.trunc($fame.pregnancy)>>
			<br>
			Impregnation fame: <<print Math.trunc($fame.impreg)>>
			<br>
			Combat fame: <<print Math.trunc($fame.scrap)>>
			<br>
			Kindness fame: <<print Math.trunc($fame.good)>>
			<br>
			Business fame: <<print Math.trunc($fame.business)>>
			<br>
			<<if $debug is 1>>
				Pimp fame: <<print Math.trunc($fame.pimp)>>
				<br>
			<</if>>
			Socialite fame: <<print Math.trunc($fame.social)>>
			<br>
			Model fame: <<print Math.trunc($fame.model)>>
			<br>
			Islander language: <<if $islander_language is undefined>>0<<else>><<print Math.trunc($islander_language)>><</if>>
			<br><br>
		<</foldout>>

		<<foldout false "_crimeFoldout">>
			<span class="gold">Crime</span>
			<<for $_cr range Object.keys(setup.crimeNames)>>
				<<foldout false $_cr>>
					<span class="gold"><<print toTitleCase(setup.crimeNames[$_cr]) + ":">></span>
					<<print "Current: " + Math.trunc($crime[$_cr].current)>>
					<br>
					<<print "History: " + Math.trunc($crime[$_cr].history)>>
					<br>
					<<print "Daily: " + Math.trunc($crime[$_cr].daily)>>
					<br>
					<<print "Count: " + Math.trunc($crime[$_cr].count)>>
					<br>
					<<print "Count History: " + Math.trunc($crime[$_cr].countHistory)>>
					<br>
				<</foldout>>
			<</for>>
			<<foldout false "_crimeTotalsFoldout">>
				<span class="gold">Totals:</span>
				<<print "Current: " + crimeSumCurrent()>>
				<br>
				<<print "History: " + crimeSumHistory()>>
				<br>
				<<print "Daily: " + crimeSumDaily()>>
				<br>
				<<print "Count: " + crimeSumCount()>>
				<br>
				<<print "Count History: " + crimeSumCountHistory()>>
				<br>
			<</foldout>>
			<<foldout false "_crimeEventsFoldout">>
				<span class="gold">Crime Events:</span>
				<span id="statscrimeevents"><<listCrimeCheats>></span>
				<br>
			<</foldout>>
		<</foldout>>

		<<foldout false "_transformationFoldout">>
			<span class="gold">Transformations</span>
			Wolfiness: <<print Math.trunc($wolfbuild)>> (30+ for full transformation)
			<br>
			Wolf manifestation: <<print Math.trunc($wolfgirl)>>
			<br>
			Cattiness: <<print Math.trunc($catbuild)>> (50+ for full transformation)
			<br>
			Cat manifestation: <<print Math.trunc($cat)>>
			<br>
			Bovinity: <<print Math.trunc($cowbuild)>> (30+ for full transformation)
			<br>
			Cow manifestation: <<print Math.trunc($cow)>>
			<br>
			<<if $hallucinations gte 2 or $bestialitydisable is "t">>Harpyness<<else>>Birdieness<</if>>: <<print Math.trunc($birdbuild)>> (30+ for full transformation)
			<br>
			<<if $hallucinations gte 2 or $bestialitydisable is "t">>Harpy<<else>>Bird<</if>> manifestation: <<print Math.trunc($harpy)>>
			<br>
			Foxiness: <<print Math.trunc($foxbuild)>> (30+ for full transformation)
			<br>
			Fox manifestation: <<print Math.trunc($fox)>>
			<br>
			Angelicness: <<print Math.trunc($angelbuild)>> (50+ for full transformation)
			<br>
			Angel manifestation: <<print Math.trunc($angel)>>
			<br>
			Demonicness: <<print Math.trunc($demonbuild)>> (30+ for full transformation)
			<br>
			Demonic manifestation: <<print Math.trunc($demon)>>
			<br>
			Fallen manifestation:
			<<print ($fallenangel is undefined ? 0 : Math.trunc($fallenangel))>>
			<br>
			Fallen Forgiveness: <<print Math.trunc($fallenbuild)>> (30+ to be forgiven)
			<br><br>
		<</foldout>>

		<<foldout false "_parasitePregnancyFoldout">>
			<span class="gold">Parasite Pregnancy</span>
			<<set $_aPregnancy to $sexStats.anus.pregnancy>>
			<<if $_aPregnancy.type is "parasite" or $_aPregnancy.type is null>>
				<<for _i to 0; _i lt maxParasites("anus"); _i++>>
					<<if $_aPregnancy.fetus[_i] isnot undefined>>
						<<if $_aPregnancy.fetus[_i].fertilised>>
							Anal slot <<=_i+1>> is pregnant with a $_aPregnancy.fetus[_i].stats.gender $_aPregnancy.fetus[_i].creature.
							<<if $_aPregnancy.fetus[_i].stats.gender is "Hermaphrodite">>
								<<if $pregnancyStats.parasiteDoctorEvents gte 4 and $_aPregnancy.fetus[_i].daysLeft is 0>>
									Dr Harper will be able to help you to deliver at any time.
								<<elseif $pregnancyStats.parasiteDoctorEvents gte 4>>
									Dr Harper will be able to help you to deliver in <<=$_aPregnancy.fetus[_i].daysLeft>> days.
								<<else>>
									You will need to see Dr Harper to deliver.
								<</if>>
							<<else>>
								<<if $_aPregnancy.fetus[_i].daysLeft is 0>>
									It will be ready to deliver at any time soon.
								<<else>>
									It will be ready to deliver in less than <<=$_aPregnancy.fetus[_i].daysLeft>> days.
								<</if>>
							<</if>>
							<br>
						<<else>>
							Anal slot <<=_i+1>> has a $_aPregnancy.fetus[_i].stats.gender $_aPregnancy.fetus[_i].creature egg ready to be fertilised.<br>
						<</if>>
					<<else>>
						Anal slot <<=_i+1>> is empty.<br>
					<</if>>
				<</for>>
			<<else>>
				<<if getPregnancyObject().awareOf>>
					Unable to host parasites due to other type of anal pregnancy.
				<<else>>
					<<for _i to 0; _i lt maxParasites("anus"); _i++>>
						Anal slot <<=_i+1>> is empty.<br>
					<</for>>
				<</if>>
			<</if>>
			<<set $_vPregnancy to $sexStats.vagina.pregnancy>>
			<<if $player.vaginaExist>>
				<<if $_vPregnancy.type is "parasite" or $_vPregnancy.type is null>>
					<<for _i to 0; _i lt maxParasites("vagina"); _i++>>
						<<if $_vPregnancy.fetus[_i] isnot undefined>>
							<<if $_vPregnancy.fetus[_i].fertilised>>
								Vaginal slot <<=_i+1>> is pregnant with a $_vPregnancy.fetus[_i].stats.gender $_vPregnancy.fetus[_i].creature.
								<<if $_vPregnancy.fetus[_i].stats.gender is "Hermaphrodite">>
									<<if $pregnancyStats.parasiteDoctorEvents gte 4 and $_vPregnancy.fetus[_i].daysLeft is 0>>
										Dr Harper will be able to help you to deliver at any time.
									<<elseif $pregnancyStats.parasiteDoctorEvents gte 4>>
										Dr Harper will be able to help you to deliver in <<=$_vPregnancy.fetus[_i].daysLeft + 1>> days.
									<<else>>
										You will need to see Dr Harper to deliver.
									<</if>>
								<<else>>
									<<if $_vPregnancy.fetus[_i].daysLeft is 0>>
										It will be ready to deliver at any time soon.
									<<else>>
										It will be ready to deliver in less than <<=$_vPregnancy.fetus[_i].daysLeft>> days.
									<</if>>
								<</if>>
								<br>
							<<else>>
								Vaginal slot <<=_i+1>> has a $_vPregnancy.fetus[_i].stats.gender $_vPregnancy.fetus[_i].creature egg ready to be fertilised.<br>
							<</if>>
						<<else>>
							Vaginal slot <<=_i+1>> is empty.<br>
						<</if>>
					<</for>>
				<<else>>
					<<if getPregnancyObject().awareOf>>
						Unable to host parasites due to other type of vaginal pregnancy.
					<<else>>
						<<for _i to 0; _i lt maxParasites("vagina"); _i++>>
							Vaginal slot <<=_i+1>> is empty.<br>
						<</for>>
					<</if>>
				<</if>>
			<</if>>
			<br>
		<</foldout>>
		<<set $_menstruation to $sexStats.vagina.menstruation>>
		<<if $cycledisable is "f">>
			<<foldout false "_menstruationFoldout">>
				<span class="gold">Menstruation cycle</span>
				Running: <<print $_menstruation.running ? "true" : "false">>
				<<if $_menstruation.running>>
					<br>
					Current day in cycle: <<print $_menstruation.currentDay>>
					<br>
					Last day in cycle: <<print $_menstruation.currentDaysMax>>
					<br>
					Most risky days: <<print $_menstruation.stages[2]>>
					<br>
				<</if>>
				<br>
			<</foldout>>
		<</if>>
		<<foldout false "_extraPregnancyFoldout">>
			<span class="gold">Pregnancy</span>
			/* Previously commented out for being a major spoil, but caused players to think a bug had occured */
			Total days being pregnant: <<print Math.floor($pregnancyStats.totalDaysPregnant)>>
			<br>
			Total days knowingly being pregnant: <<print Math.floor($pregnancyStats.totalDaysPregnancyKnown)>>
			<br>
			<<if canBeMPregnant()>>
			<<elseif !$player.vaginaExist or !$_menstruation.running>>
				Can not currently get pregnant.
			<<elseif $_vPregnancy.type is "parasite">>
				Parasites in the womb are preventing normal pregnancy from occurring.
			<<elseif $_menstruation.currentState is "recovering">>
				You are not quite ready to get pregnant so soon after your last one.
			<<elseif $_vPregnancy.type isnot null>>
				Currently pregnant with: <<print $_vPregnancy.fetus.length>>
					<<extraStatisticsPregnancyType $_vPregnancy.type>>
				<br>
				<<set $_days to pregnancyDaysEta($_vPregnancy)>>
				<<if $_days lt 1>>
					ETA: Anytime.
				<<elseif $_days>>
					ETA: <<print $_days>> day<<if $_days isnot 1>>s<</if>>.
				<</if>>
				<br>
			<<else>>
				Not currently pregnant.
				<br>
				<<if $pregnancytype is "realistic">>
					<<set [_trackedNPCs, _spermArray] to spermObjectToArray($sexStats.vagina.sperm, true, true)>>
					Number of sources of sperm that can get you pregnant: <<print _spermArray.length>>.
					<<if _trackedNPCs.length>>
						<br>
						Those whose sperm you have inside you currently:
						<ul>
							<<for _name range _trackedNPCs>>
								<<set $_count to _spermArray.filter(s => s.source === T.name.source).length>>
								<li>
									<<print pregnancyNameCorrection(_name.source)>>
									<<if $_count gt 1>>
										(x<<print $_count>>)
									<</if>>
								</li>
							<</for>>
						</ul>
					<</if>>
				<</if>>
			<</if>>
			<<if canBeMPregnant()>>
				<<if $_aPregnancy.type is "parasite">>
					Parasites in the womb are preventing normal pregnancy from occurring.
				<<elseif !$_menstruation.running>>
					You can not current get pregnant.
				<<elseif $_menstruation.currentState is "recovering">>
					You are not quite ready to get pregnant so soon after your last one.
				<<elseif $_aPregnancy.type isnot null>>
					Currently pregnant with: <<print $_aPregnancy.fetus.length>>
					<<extraStatisticsPregnancyType $_aPregnancy.type>>
					<br>
					<<set $_days to pregnancyDaysEta($_aPregnancy)>>
					<<if $_days lt 1>>
						ETA: Anytime.
					<<elseif $_days>>
						ETA: <<print $_days>> day<<if $_days isnot 1>>s<</if>>.
					<</if>>
					<br>
				<<else>>
					Not currently pregnant.
					<br>
					<<if $pregnancytype is "realistic">>
						<<set [_trackedNPCs, _spermArray] to spermObjectToArray($sexStats.anus.sperm, true, true)>>
						Number of sources of sperm that can get you pregnant: <<print _spermArray.length>>.
						<<if _trackedNPCs.length>>
							<br>
							Those whose sperm you have inside you currently:
							<ul>
								<<for _name range _trackedNPCs>>
									<<set $_count to _spermArray.filter(s => s.source === T.name.source).length>>
									<li>
										<<print pregnancyNameCorrection(_name.source)>>
										<<if $_count gt 1>>
											(x<<print $_count>>)
										<</if>>
									</li>
								<</for>>
							</ul>
						<</if>>
					<</if>>
				<</if>>
			<</if>>
		<</foldout>>
		<<if $NPCName.find(npc => npc.pregnancy and npc.pregnancy.enabled isnot undefined)>>
			<<foldout false "_npcPregnancyFoldout">>
				<span class="gold">NPC Pregnancy</span>
				<<for $_npc range $NPCName.filter(npc => npc.pregnancy and npc.pregnancy.enabled isnot undefined)>>
					<div>
						<<print $_npc.nam>>:
						<<if !$_npc.pregnancy.enabled and !$_npc.pregnancy.fetus.length>>
							Pregnancy for NPC disabled by the player.
						<<elseif !$_npc.pregnancy.fetus.length>>
							Not Pregnant.
						<<elseif $_npc.pregnancy.fetus.length>>
							Pregnant with <<print $_npc.pregnancy.fetus.length>>
							<<extraStatisticsPregnancyType $_npc.pregnancy.type>>
							<<set $_days to pregnancyDaysEta($_npc.pregnancy)>>
							<<if $_days lt 1>>
								ETA: Anytime.
							<<elseif $_days>>
								ETA: <<print $_days>> day<<if $_days isnot 1>>s<</if>>.
							<</if>>
						<</if>>
					</div>
				<</for>>
			<</foldout>>
		<</if>>
	</div>
<</widget>>

<<widget "extraStatisticsPregnancyType">>
	<<switch _args[0]>>
		<<case "human">>normal babies.
		<<case "wolf">>wolf puppies.
		<<case "hawk">>hawk eggs.
	<</switch>>
<</widget>>

<<widget "statisticsTimeCompare">><<silently>>
	<<if $statFreeze is true>>
		<<set $_text_output to "Not avaliable when stats are being frozen">>
	<<elseif $args[0]>>
		<<set _difference to new DateTime($args[0]).compareWith(Time.date)>>
		<<set $_text_output to "">>
		<<if _difference.years>>
			<<set $_text_output += `${_difference.years} year${_difference.years gt 1 ? "s" : ""}`>>
		<</if>>
		<<if _difference.months>>
			<<if $_text_output>><<set $_text_output += ", ">><</if>>
			<<set $_text_output += `${_difference.months} month${_difference.months gt 1 ? "s" : ""}`>>
		<</if>>
		<<if _difference.days>>
			<<if $_text_output>><<set $_text_output += ", ">><</if>>
			<<set $_text_output += `${_difference.days} day${_difference.days gt 1 ? "s" : ""}`>>
		<</if>>
		<<if _difference.hours>>
			<<if $_text_output>><<set $_text_output += ", ">><</if>>
			<<set $_text_output += `${_difference.hours} hour${_difference.hours gt 1 ? "s" : ""}`>>
		<</if>>
		<<if _difference.minutes>>
			<<if $_text_output>><<set $_text_output += ", ">><</if>>
			<<set $_text_output += `${_difference.minutes} minute${_difference.minutes gt 1 ? "s" : ""}`>>
		<</if>>
		<<if !$_text_output>>
			<<set $_text_output += "recently">>
		<<else>>
			<<set $_text_output += " ago">>
		<</if>>
	<<else>>
		<<set $_text_output to "never">>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "moneyStats">>
	<<set $_moneyStats to (_showSnapshot is "show" ? clone(_moneyStatsSnapshot) : clone(_moneyStats))>>
	<<set $_moneyKeys to (_showSnapshot is "show" ? clone(_moneySnapshotKeys) : clone(_moneyKeys))>>
	<<set $_moneyTotal to (_showSnapshot is "show" ? clone(_moneyStatsSnapshotTotal) : clone(_moneyStatsTotal))>>
	<<link `$moneyStatsSnapshot ? "Re-create Snapshot" : "Create Snapshot"`>>
		<<set $moneyStatsSnapshot to {
			date: Time.date.timeStamp,
			money: clone(V.moneyStats),
			time: clone(V.timeStats),
		}>>
		<<set [_moneySnapshotKeys, _moneyStatsSnapshot, _moneyStatsSnapshotTotal] to moneyStatsProcess(clone($moneyStatsSnapshot.money))>>
		<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
	<</link>>
	<<if $moneyStatsSnapshot>>
		| <<link "Clear Snapshot">>
			<<unset $moneyStatsSnapshot>>
			<<unset _showSnapshot>>
			<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
		<</link>>
	<</if>>
	<br><br>
	<<link `_moneyStatsDetailed ? "Reduce details" : "Expand details"`>>
		<<set _moneyStatsDetailed to !_moneyStatsDetailed>>
		<<set [_moneyKeys, _moneyStats, _moneyStatsTotal] to moneyStatsProcess(clone($moneyStats))>>
		<<if $moneyStatsSnapshot?.data>>
			<<set [_moneySnapshotKeys, _moneyStatsSnapshot, _moneyStatsSnapshotTotal] to moneyStatsProcess(clone($moneyStatsSnapshot.money))>>
		<</if>>
		<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
	<</link>> |
	<span @class="_moneyStatsCount ? 'goldLink' : ''">
		<<link `_moneyStatsCount ? "Hide Counts" : "Show Counts"`>>
			<<set _moneyStatsCount to !_moneyStatsCount>>
			<<if !_moneyStatsCount and _moneyStatsSorting?.includes("Count")>><<unset _moneyStatsSorting>><</if>>
			<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
		<</link>>
	</span> |
	<span @class="_moneyStatsAverages ? 'goldLink' : ''">
		<<link `_moneyStatsAverages ? "Hide Averages" : "Show Averages"`>>
			<<set _moneyStatsAverages to !_moneyStatsAverages>>
			<<if !_moneyStatsAverages and _moneyStatsSorting?.includes("Average")>><<unset _moneyStatsSorting>><</if>>
			<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
		<</link>>
	</span> |
	<span @class="_moneyStatsDate ? 'goldLink' : ''">
		<<link `_moneyStatsDate ? "Hide Dates" : "Show Dates"`>>
			<<set _moneyStatsDate to !_moneyStatsDate>>
			<<if !_moneyStatsDate and _moneyStatsSorting?.includes("Date")>><<unset _moneyStatsSorting>><</if>>
			<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
		<</link>>
	</span> |
	<<if Object.keys($timeStats).length>>
		<span @class="_moneyStatsHourRates ? 'goldLink' : ''">
			<<link `_moneyStatsHourRates ? "Hide Hour Rates" : "Show Hour Rates"`>>
				<<set _moneyStatsHourRates to !_moneyStatsHourRates>>
				<<if !_moneyStatsHourRates and _moneyStatsSorting?.includes("Hour Rates")>><<unset _moneyStatsSorting>><</if>>
				<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
			<</link>>
		</span>
	<</if>>
	<<if $moneyStatsSnapshot>>
		||
		<span @class="_showSnapshot is 'show' ? 'goldLink' : ''">
			<<link `_showSnapshot is "show" ? "Hide Snapshot" : "Show Snapshot"`>>
				<<if _showSnapshot is "show">>
					<<unset _showSnapshot>>
				<<else>>
					<<set _showSnapshot to "show">>
				<</if>>
				<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
			<</link>>
		</span>
		|
		<span @class="_showSnapshot is 'compare' ? 'goldLink' : ''">
			<<link `_showSnapshot is "compare" ? "Hide Snapshot" : "Compare Snapshot"`>>
				<<if _showSnapshot is "compare">>
					<<unset _showSnapshot>>
				<<else>>
					<<set _showSnapshot to "compare">>
				<</if>>
				<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
			<</link>>
		</span>
	<</if>>
	<<if _moneyStatsSorting>>
		| <<link "Reset Sorting">>
			<<unset _moneyStatsSorting>>
			<<replace "#moneyStatsDiv">><<moneyStats>><</replace>>
		<</link>>
		<<run $_moneyKeys.sort((a, b) => {
			if (_moneyStatsSorting.includes("Desc")) {
				const tempSwap = clone(a);
				a = clone(b);
				b = tempSwap;
			}
			switch(_moneyStatsSorting.replace("Desc","")) {
				case "Source":
					if (a.toUpperCase() < b.toUpperCase()) return -1;
					return 1;
					break;
				case "Earned":
					return ($_moneyStats[b].earned || 0) - ($_moneyStats[a].earned || 0);
				case "Spent":
					return ($_moneyStats[b].spent || 0) - ($_moneyStats[a].spent || 0);
				case "Earned Count":
					return ($_moneyStats[b].earnedCount || 0) - ($_moneyStats[a].earnedCount || 0);
				case "Earned Average":
					return ($_moneyStats[b].earned / $_moneyStats[b].earnedCount || 0) - ($_moneyStats[a].earned / $_moneyStats[a].earnedCount || 0);
				case "Hour Rates":
					return (statChange.timeTrackingTotal(b) ? $_moneyStats[b].earned / statChange.timeTrackingTotal(b) : 0) - (statChange.timeTrackingTotal(a) ? $_moneyStats[a].earned / statChange.timeTrackingTotal(a) : 0);
				case "Spent Count":
					return ($_moneyStats[b].spentCount || 0) - ($_moneyStats[a].spentCount || 0);
				case "Spent Average":
					return ($_moneyStats[b].spent / $_moneyStats[b].spentCount || 0) - ($_moneyStats[a].spent / $_moneyStats[a].spentCount || 0);
				case "Date":
					return (Math.max($_moneyStats[b].earnedTimeStamp || 0, $_moneyStats[b].spentTimeStamp || 0)) - (Math.max($_moneyStats[a].earnedTimeStamp || 0, $_moneyStats[a].spentTimeStamp || 0));
			}
		})>>
	<</if>>
	<table id="moneyStats">
		<thead>
			<tr>
				<th scope="col"><<moneyStatsTitle "Source">></th>
				<th scope="col"><<moneyStatsTitle "Spent">></th>
				<<if _moneyStatsAverages>>
					<th scope="col"><<moneyStatsTitle "Spent Average">></th>
				<</if>>
				<<if _moneyStatsCount>>
					<th scope="col"><<moneyStatsTitle "Spent Count">></th>
				<</if>>
				<th scope="col"><<moneyStatsTitle "Earned">></th>
				<<if _moneyStatsAverages>>
					<th scope="col"><<moneyStatsTitle "Earned Average">></th>
				<</if>>
				<<if _moneyStatsCount>>
					<th scope="col"><<moneyStatsTitle "Earned Count">></th>
				<</if>>
				<<if _moneyStatsHourRates>>
					<th scope="col"><<moneyStatsTitle "Hour Rates">></th>
				<</if>>
				<<if _moneyStatsDate>>
					<th scope="col"><<moneyStatsTitle "Date">></th>
				<</if>>
			</tr>
		</thead>
		<<if _showSnapshot is "show">><<set _timeTrackingSnapshotOveride to true>><</if>>
		<<for $_key range $_moneyKeys>>
			<<if $_moneyStats[$_key].earned or $_moneyStats[$_key].spent>>
				<tbody class="stat">
					<td data-label="Source"><<moneyStatsNames $_key>></td>
					<td data-label="Spent" @class="$_moneyStats[$_key].spent ? '' : 'mobileHidden'">
						<<if $_moneyStats[$_key].spent>>
							<<printmoney `$_moneyStats[$_key].spent or 0` "red">>
							<<moneyStatsCompare $_key "spent">>
						<<else>>
							<span class="dash">-</span>
						<</if>>
					</td>
					<<if _moneyStatsAverages>>
						<td data-label="Spent Average" @class="$_moneyStats[$_key].spent ? '' : 'mobileHidden'">
							<<if $_moneyStats[$_key].spent>>
								<<printmoney `$_moneyStats[$_key].spent / $_moneyStats[$_key].spentCount or 0` "red">>
							<<else>>
								<span class="dash">-</span>
							<</if>>
						</td>
					<</if>>
					<<if _moneyStatsCount>>
						<td data-label="Spent Count" @class="$_moneyStats[$_key].spent ? '' : 'mobileHidden'">
							<<if $_moneyStats[$_key].spentCount>>
								<<print $_moneyStats[$_key].spentCount>>
							<<else>>
								<span class="dash">-</span>
							<</if>>
						</td>
					<</if>>
					<td data-label="Earned" @class="$_moneyStats[$_key].earned ? '' : 'mobileHidden'">
						<<if $_moneyStats[$_key].earned>>
							<<printmoney `$_moneyStats[$_key].earned or 0`>>
							<<moneyStatsCompare $_key "earned">>
						<<else>>
							<span class="dash">-</span>
						<</if>>
					</td>
					<<if _moneyStatsAverages>>
						<td data-label="Earned Average" @class="$_moneyStats[$_key].earned ? '' : 'mobileHidden'">
							<<if $_moneyStats[$_key].earned>>
								<<printmoney `$_moneyStats[$_key].earned / $_moneyStats[$_key].earnedCount or 0`>>
							<<else>>
								<span class="dash">-</span>
							<</if>>
						</td>
					<</if>>
					<<if _moneyStatsCount>>
						<td data-label="Earned Count" @class="$_moneyStats[$_key].earned ? '' : 'mobileHidden'">
							<<if $_moneyStats[$_key].earnedCount>>
								<<print $_moneyStats[$_key].earnedCount>>
							<<else>>
								<span class="dash">-</span>
							<</if>>
						</td>
					<</if>>
					<<if _moneyStatsHourRates>>
						<td data-label="Hour Rates">
							<<if statChange.timeTrackingTotal($_key)>>
								<<printmoney `$_moneyStats[$_key].earned / statChange.timeTrackingTotal($_key)`>>
								<<moneyStatsCompareHourly $_key>>
							<<else>>
								<span class="dash">-</span>
							<</if>>
						</td>
					<</if>>
					<<if _moneyStatsDate>>
						<td data-label="Date"><<moneyStatsDate $_moneyStats[$_key].spentTimeStamp $_moneyStats[$_key].earnedTimeStamp>></td>
					<</if>>
				</tbody>
			<</if>>
		<</for>>
		<<unset _timeTrackingSnapshotOveride>>
		<tbody class="total">
			<td data-label="Source">Total</td>
			<td data-label="Spent">
				<<printmoney $_moneyTotal.spent "red">>
				<<moneyStatsCompare "total" "spent">>
			</td>
			<<if _moneyStatsAverages>>
				<td data-label="Spent Average"><<printmoney `$_moneyTotal.spent / $_moneyTotal.spentCount or 0` "red">></td>
			<</if>>
			<<if _moneyStatsCount>>
				<td data-label="Spent Count"><<print $_moneyTotal.spentCount>></td>
			<</if>>
			<td data-label="Earned">
				<<printmoney $_moneyTotal.earned>>
				<<moneyStatsCompare "total" "earned">>
			</td>
			<<if _moneyStatsAverages>>
				<td data-label="Earned Average"><<printmoney `$_moneyTotal.earned / $_moneyTotal.earnedCount or 0`>></td>
			<</if>>
			<<if _moneyStatsCount>>
				<td data-label="Earned Count"><<print $_moneyTotal.earnedCount>></td>
			<</if>>
			<<if _moneyStatsHourRates>>
				<td data-label="Hour Rates">-</td>
			<</if>>
			<<if _moneyStatsDate>>
				<td data-label="Date"><<moneyStatsDate $_moneyTotal.spentTimeStamp $_moneyTotal.earnedTimeStamp>></td>
			<</if>>
		</tbody>
		<<if _showSnapshot>>
			<tfoot>
				<tr>
					<td colspan="3">
						<<set _snapShotDate to new DateTime($moneyStatsSnapshot.date)>>
						Snapshot from: 
						<<switch $options.dateFormat>>
							<<case "en-US">>
								<<print _snapShotDate.month>>/<<print _snapShotDate.day>>/<<print _snapShotDate.year>>
							<<case "zh-CN">>
								<<print _snapShotDate.year>>/<<print _snapShotDate.month>>/<<print _snapShotDate.day>>
							<<default>>
								<<print _snapShotDate.day>>/<<print _snapShotDate.month>>/<<print _snapShotDate.year>>
						<</switch>>
						- <<ampm _snapShotDate.hour _snapShotDate.minute>>
						<br>
						Snapshot age: <<statisticsTimeCompare $moneyStatsSnapshot.date>>
					</td>
				</tr>
			</tfoot>
		<</if>>
	</table>
<</widget>>

<<widget "moneyStatsNames">><<silently>>
	<<switch _args[0]>>
		<<case "cafeWaiter">><<set $_text_output to $player.gender_appearance is "m" ? "Cafe Waiter" : "Cafe Waitress">>
		<<case "partyDanceTips">><<set $_text_output to "Party Dance Job Tips">>
		<<case "danubeDanceTips">><<set $_text_output to "Danube Dance Job Tips">>
		<<default>><<set $_text_output to camelCaseToTitle(_args[0])>>
	<</switch>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "moneyStatsTitle">><<silently>>
	<<if _moneyStatsSorting is _args[0]>>
		<<set $_text_output to ` <<link "${_args[0]}&#x25B2;">><<set _moneyStatsSorting to "${_args[0]}Desc">><<replace "#moneyStatsDiv">><<moneyStats>><</replace>><</link>>`>>
	<<elseif  _moneyStatsSorting is _args[0] + "Desc">>
		<<set $_text_output to ` <<link "${_args[0]}&#x25BC;">><<unset _moneyStatsSorting>><<replace "#moneyStatsDiv">><<moneyStats>><</replace>><</link>>`>>
	<<else>>
		<<set $_text_output to ` <<link "${_args[0]}">><<set _moneyStatsSorting to "${_args[0]}">><<replace "#moneyStatsDiv">><<moneyStats>><</replace>><</link>>`>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "moneyStatsCompare">><<silently>>
	<<if _args[0] and _args[1] and _showSnapshot is "compare">>
		<<set $_amount to (_moneyStats[_args[0]][_args[1]] or 0) - (_moneyStatsSnapshot[_args[0]] ? _moneyStatsSnapshot[_args[0]][_args[1]] || 0 : 0)>>
		<<set $_text_output to `+<<printmoney ${$_amount} "white">>`>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "moneyStatsCompareHourly">><<silently>>
	<<if _args[0] and _showSnapshot is "compare">>
		<<if statChange.timeTrackingTotal(_args[0]) and _moneyStats[_args[0]]?.earned and _moneyStatsSnapshot[_args[0]]?.earned>>
			<<set $_current to _moneyStats[_args[0]].earned / statChange.timeTrackingTotal(_args[0])>>
			<<set _timeTrackingSnapshotOveride to true>>
			<<if statChange.timeTrackingTotal(_args[0])>>
				<<set $_previous to _moneyStatsSnapshot[_args[0]].earned / statChange.timeTrackingTotal(_args[0])>>
				<<set $_amount to $_current - $_previous>>
				<<set $_text_output to `${$_amount gt 0 ? "+" : ""}<<printmoney ${$_amount} ${$_amount lt 0 ? "red" : "white"}>>`>>
			<</if>>
			<<unset _timeTrackingSnapshotOveride>>
		<</if>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "moneyStatsDate">><<silently>>
	<<if _args[0] or _args[1]>>
		<<set $_time to new DateTime(Math.max(_args[0] or 0, _args[1] or 0))>>
		<<switch $options.dateFormat>>
			<<case "en-US">>
				<<set $_text_output to `<<print $_time.month>>/<<print $_time.day>>/<<print $_time.year>>`>>
			<<case "zh-CN">>
				<<set $_text_output to `<<print $_time.year>>/<<print $_time.month>>/<<print $_time.day>>`>>
			<<default>>
				<<set $_text_output to `<<print $_time.day>>/<<print $_time.month>>/<<print $_time.year>>`>>
		<</switch>>
		<<set $_text_output += ` - <<ampm $_time.hour $_time.minute>>`>>
	<<else>>
		<<set $_text_output to `<span class="dash">-</span>`>>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "virginityToolTip">><<silently>>
	<<if _args[0]?.timestamp and _args[1] isnot true>>
		<<set $_time to new DateTime(_args[0].timestamp)>>
		<<switch $options.dateFormat>>
			<<case "en-US">>
				<<set $_text_output to `Taken on: ${$_time.day}/${$_time.month}/${$_time.year}`>>
			<<case "zh-CN">>
				<<set $_text_output to `Taken on: ${$_time.day}/${$_time.month}/${$_time.year}`>>
			<<default>>
				<<set $_text_output to `Taken on: ${$_time.day}/${$_time.month}/${$_time.year}`>>
		<</switch>>
		<<set $_text_output += ` - ${ampm($_time.hour, $_time.minute)}<br>How recent: <<statisticsTimeCompare _args[0].timestamp>>`>>
		<<set $_linkColour to "linkBlue">>
		<<if _args[0].consensual isnot undefined>>
			<<set $_text_output += "<br>Consensual: _args[0].consensual">>
			<<set $_linkColour to _args[0].consensual ? "green" : "red">>
		<</if>>
		<<if _args[0].position>>
			<<set $_text_output += "<br>Sex Position: _args[0].position">>
		<</if>>
		<<if _args[0].playerPenisSize>>
			<<set $_penisSize to ["micro", "mini", "tiny", "small", "normal", "large", "enormous"]>>
			<<set $_text_output += "<br>Penis size: <<print $_penisSize[_args[0].playerPenisSize + 2]>>">>
		<<elseif _args[0].npcPenisSize>>
			<<set $_penisSize to ["tiny", "average", "thick", "huge"]>>
			<<set $_text_output += "<br>Penis size: <<print $_penisSize[_args[0].npcPenisSize - 1]>>">>
		<</if>>
		<<switch _args[0].passage>>
			<<case "Tutorial">><<set $_special to "Didn't know how to scream">>
			<<case "Brothel Show Virginity Sex">><<set $_special to "Sold to the highest bidder">>
			<<case "Brothel Show Virginity Rape">><<set $_special to "Stolen from the highest bidder">>
			<<case "Sydney Temple Pure Sex">>
				<<if _args[2] is 'npc' and setup.loveInterestNpc.includes(_args[1])>>
					<<set $_special to "Given to <<nnpc_his _args[1]>> promised">>
				<<else>>
					<<set $_special to "Given to your promised">>
				<</if>>
			<<case "Sydney Temple Corrupt Sex">><<set $_special to "Defiled in the temple">>
			<<case "Estate Cards Sex">><<set $_special to "Gambled away">>
			<<case "Underground Robin Kiss Intro">>
				<<set $_special to "Taken when collared together">>
			<<case "Underground Robin Kiss Molestation">>
				/* This expected this detail to be only visible for the player's virginity */
				<<if _args[2] is "pc">>
					<<set $_sameTime to "">>
					<<set $_asRobins to "">>
					<<set $_eachOther to "Robin">>
					<<set $_otherVirginity to C.npc.Robin?.virginityDetails?.[_args[3]]?.passage is "Underground Robin Kiss Molestation" ? _args[3] : undefined>>
					<<if !$_otherVirginity>>
						<<set $_otherVirginity to C.npc.Robin?.virginityDetails?.vaginal?.passage is "Underground Robin Kiss Molestation" ? "vaginal" : (C.npc.Robin?.virginityDetails?.anal?.passage is "Underground Robin Kiss Molestation" ? "anal" : undefined)>>
					<</if>>
					<<if $_otherVirginity>>
						<<if Math.abs(_args[0]?.timestamp - C.npc.Robin.virginityDetails[$_other].timestamp) lte 1000>>
							<<set $_sameTime to "at the same time ">>
						<<else>>
							<<set $_sameTime to "in a similar situation ">>
						<</if>>
						<<set $_asRobins to `as Robin's ${$_otherVirginity is _args[3] ? "" : ($_otherVirginity + " virginity ")}`>>
						<<set $_eachOther to "each other">>
					<</if>>
					<<set $_special to `Taken ${$_sameTime}${$_asRobins}while kissing ${$_eachOther}`>>
				<</if>>
			<<case "Moor Phallus Plant Masturbation">>
				<<set $_special to "Driven mad with pleasure">>
		<</switch>>
		<<if $_special>><<set $_text_output += `<div class="lewd">Special: ${$_special}</div>`>><</if>>
		<<if setup.loveInterestNpc.includes(_args[1]) and $_linkColour isnot "red">>
			<<set $_linkColour to "lewd">>
		<</if>>
	<</if>>
<</silently>><<if $_text_output>><mouse @class="'tooltip ' + $_linkColour">(?)<span><<print $_text_output>></span></mouse><</if>>
<</widget>>
