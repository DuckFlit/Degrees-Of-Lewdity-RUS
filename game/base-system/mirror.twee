:: Widgets Mirror [widget]
<<widget "calchairlengthstage">>
	<<if $hairlength gte 1000>>
		<<set $hairlengthstage to "feet">>
	<<elseif $hairlength gte 800>>
		<<set $hairlengthstage to "thighs">>
	<<elseif $hairlength gte 600>>
		<<set $hairlengthstage to "navel">>
	<<elseif $hairlength gte 400>>
		<<set $hairlengthstage to "chest">>
	<<elseif $hairlength gte 200>>
		<<set $hairlengthstage to "shoulder">>
	<<else>>
		<<set $hairlengthstage to "short">>
	<</if>>

	<<if $fringelength gte 1000>>
		<<set $fringelengthstage to "feet">>
	<<elseif $fringelength gte 800>>
		<<set $fringelengthstage to "thighs">>
	<<elseif $fringelength gte 600>>
		<<set $fringelengthstage to "navel">>
	<<elseif $fringelength gte 400>>
		<<set $fringelengthstage to "chest">>
	<<elseif $fringelength gte 200>>
		<<set $fringelengthstage to "shoulder">>
	<<else>>
		<<set $fringelengthstage to "short">>
	<</if>>
	<<set $hairlength = Math.clamp($hairlength, 0, 1000)>>
	<<set $fringelength = Math.clamp($fringelength, 0, 1000)>>
<</widget>>

<<widget "mirror">>
	<div id="mirror">
		<<if _args[0] isnot undefined>>
			<<mirrorDisplay _args[0]>>
		<<else>>
			<<mirrorDisplay>>
		<</if>>
	</div>
<</widget>>

<<widget "preMirror">>
	<<if (Browser.isMobile).any()>>
		<<set $showMannequins to 0>>
	<<else>>
		<<set $showMannequins to 1>>
	<</if>>
<</widget>>

<<widget "postMirror">>
	<<shopClothingFilterReset>> /* Due to the reusing of shop code */
<</widget>>

<<widget "mirrorDisplay">>
	<<switch $mirrorMenu>>
		<<case "appearance">>
			<<if playerBellyVisible(true) and !playerAwareTheyArePregnant()>>
				<<mirrorAppearancePregnancy>>
			<<else>>
				<<mirrorAppearance>>
			<</if>>
		<<case "body">>
			<<visual-settings>>
		<<case "skin">>
			<<mirrorSkin>>
		<<case "hair">>
			<<mirrorHair>>
		<<case "makeup">>
			<<mirrorMakeup>>
		<<case "transformation">>
			<<mirrorTransformation>>
		<<default>>
			<<mirrorMenu _args[0]>>
	<</switch>>
	<<calchairlengthstage>>
	<br><br>
<</widget>>

<<widget "mirrorwet">>
	<<if _args[1] or _args[2] or _args[3]>>
		<br>
		<<set $_part to _args[0]>>
		<<set $_semen to _args[1]>>
		<<set $_slime to _args[2]>>
		<<set $_nectar to _args[3]>>
		Your $_part
		<<if $_part is "thighs" or $_part is "feet">>
			are
		<<else>>
			is
		<</if>>
		<<if $_semen gt 0>>
			<<switch Math.clamp($_semen, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			<<if $_slime gt 0 and $_nectar gt 0>>
				semen,
			<<elseif $_slime gt 0 or $_nectar gt 0>>
				semen and
			<<else>>
				semen.
			<</if>>
		<</if>>
		<<if $_slime gt 0>>
			<<switch Math.clamp($_slime, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			<<if $_nectar gt 0>>
				slime and
			<<else>>
				slime.
			<</if>>
		<</if>>
		<<if $_nectar gt 0>>
			<<switch Math.clamp($_nectar, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			nectar.
		<</if>>
	<</if>>
<</widget>>

<<widget "mirrorMenu">>
	<<set $_mirror to _args[0] || 'mirror'>>
	You look into the $_mirror.
	<<if $fallenangel is 2>>
		A pathetic excuse of a person
	<<elseif $hallucinogen gte 200>>
		The $_mirror melts away into an inky black puddle, floating before you.
		<<if $_mirror is 'mirror'>>
			Shards of glass graze past your skin and dissolve into the air.
		<</if>>
		<br>
		You stare into the void, and the void
	<<elseif $hallucinogen gte 100>>
		The surface folds over itself at an angle you can't quite understand, and something unrecognisable
	<<elseif $hallucinogen gt 0>>
		The surface ripples at your presence, and a vaguely familiar <<girl>>
	<<elseif $trauma gte $traumamax>>
		A <<girl>> with glazed eyes
	<<else>>
		A <<= $pain gte 100 ? "crying" : $pain gte 40 ? "tearful" : $pain gte 1 ? "frowning" : "cheerful">> <<girl>>
	<</if>>
	stares back.
	<<if ["haunt", "despair"].includes($wraith.state) and $hallucinations gte 1 and ((random(1, 100) is 1) or ($controlled is 0 and random(1, 100) lte 5))>>
		<span class="fading">A pale figure stands behind.</span>
	<</if>>
	<br><br>
	<<crimeicon "mark">><<link "Examine how you are seen by others">><<set $mirrorMenu to "appearance">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>
	<<if !$simpleMirror>>
		__Appearance__
		<br>
		<<investigateicon>><<link "Examine your body">><<set $mirrorMenu to "skin">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
		<br><br>
	<</if>>
	__Hair__
	<br>
	<<hairdressericon "hairspray">><<link "Change your hair style">><<set $mirrorMenu to "hair">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>
	__Makeup__
	<br>
	<<cosmeticsicon>><<link "Apply makeup">><<set $mirrorMenu to "makeup">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>

	<<if $worn.neck.name is "love locket">>
		__Locket__
		<br>
		<span @class="'clothes-'+$worn.neck.colour.replace(' ','-')"><<icon "locket.png">></span><<link [[Customise locket|Mirror Locket]]>><<set $passage_mirror to $passage>><</link>>
		<br><br>
	<</if>>

	<<if !$simpleMirror>>
		<<if $specialTransform is 1 or $physicalTransform is 1>>
			__Transformation__
			<br>
			<<if $demon gte 6>><<tficon "demon">>
			<<elseif $wolf gte 6>><<tficon "wolf">>
			<<elseif $angel gte 6>><<tficon "angel">>
			<<elseif $fallenangel gte 2>><<tficon "fallen">>
			<<elseif $cat gte 6>><<tficon "cat">>
			<<elseif $cow gte 6>><<tficon "cow">>
			<<elseif $harpy gte 6>><<tficon "harpy">>
			<<elseif $fox gte 6>><<tficon "fox">>
			<<else>><<tficon "angel">>
			<</if>>
			<<link "Examine your inner self">><<set $mirrorMenu to "transformation">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
		<<else>>
			Obtain otherworldly powers to examine further.
		<</if>>
	<</if>>
	<br><br>

	<<if $debug is 1>>
		<<ind>><<link "Debug">><<set $mirrorMenu to "debug">><<replace #mirror>><<mirrorDisplay>><</replace>><</link>>
	<</if>>
<</widget>>

<<widget "mirrorGender">>
	<div class="settingsGrid">
		<div class="settingsHeader">Gender Appearance</div>
		<<settextcolorfromfemininity $player.femininity>>
		<div class="settingsToggleItemWide">
			You look like a <span @class="_text_color"><<if playerBellyVisible(true)>>pregnant <</if>><<girl>>.</span>
		</div>
		<div class="settingsToggleItem">
			<span class="gold bold">Contributing Factors:</span>
			<br>
			<<for _x range $player.gender_appearance_factors>>
				<<if _x.femininity is 0 or !_x.factor>>
					<<continue>>
				<</if>>
				<<settextcolorfromfemininity _x.femininity>>
				<span @class="_text_color">
					_x.factor
					<<if $debug is 1>>
						_x.femininity
					<<else>>
						<<print "+".repeat(
							Math.trunc(Math.clamp(
								Math.abs(_x.femininity) / 100, 0, 10
							))
						)>>
					<</if>>
				</span>
				<br>
			<</for>>
			<<if $debug is 1>>
				<<settextcolorfromfemininity $player.femininity>>
				Total femininity: <span @class="_text_color">$player.femininity</span>
				<br>
			<</if>>
		</div>
		<div class="settingsToggleItem">
			<span class="gold bold">Behaviour:</span>
			<br>
			<<if $player.gender_posture is "n">>
				You turn around to get a look at yourself. You look like a <<girl>>. Maybe if you carried yourself differently, you could change that.
			<<elseif $player.gender_posture is "f">>
				You strike a few girly poses and put on your best feminine voice.
				<br>
				<span class="pink">Others will be more likely to think that you're a girl.</span>
			<<elseif $player.gender_posture is "m">>
				You flex your muscles and add some gruff to your voice.
				<br>
				<span class="lblue">Others will be more likely to think that you're a boy.</span>
			<</if>>
			<br><br>
			<<set _postures to ["masculine", "feminine", "natural"]>>
			Posture:
			<<capture _i>>
				<<for _i = 0; _i < _postures.length; _i++>>
					<span @class="$player.gender_posture is _postures[_i].charAt(0) ? 'goldLink no-numberify' : 'unselected no-numberify'">
						<<link _postures[_i].toUpperFirst()>>
							<<set $player.gender_posture to _postures[_i].charAt(0)>>
							<<exposedcheck>>
							<<replace "#mirrorGender">><<mirrorGender>><</replace>>
						<</link>>
					</span>	<<= _i lt _postures.length - 1 ? "|" : "">>
				<</for>>
			<</capture>>
		</div>
	</div>
<</widget>>

<<widget "mirrorAppearance">>
	<<mirroricon>><<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	<span id="mirrorGender">
		<<mirrorGender>>
	</span>
	<hr>

	<div class="settingsGrid">
		<<set _increaseAllure to []>>
		<<set _increaseAttractive to []>>
		<<set _increaseBoth to (name) => {
			_increaseAllure.push(name);
			_increaseAttractive.push(name);
		}>>
		<<if $beauty gte ($beautymax / 7)>>
			<<run _increaseBoth("Cute")>>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 2>>
			<<run _increaseBoth("Pretty")>>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 3>>
			<<run _increaseBoth("Charming")>>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 4>>
			<<run _increaseBoth("Beautiful")>>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 5>>
			<<run _increaseBoth("Ravishing")>>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 6>>
			<<run _increaseBoth("Divine")>>
		<</if>>
			<<run _increaseBoth("Hair length")>>
		<<if $worn.upper.type.includes("naked")>>
			<<run _increaseBoth("Topless")>>
		<<elseif $worn.upper.reveal gte 500>>
			<<run _increaseBoth("Revealing top")>>
		<</if>>
		<<if $worn.lower.type.includes("naked")>>
			<<run _increaseBoth("Bottomless")>>
		<<elseif $worn.lower.reveal gte 500>>
			<<run _increaseBoth("Revealing bottoms")>>
		<</if>>
		<<if $worn.under_lower.type.includes("naked")>>
			<<run _increaseBoth("Pantiless")>>
		<<elseif $worn.under_lower.reveal gte 500>>
			<<run _increaseBoth("Sexy underwear")>>
		<</if>>
		<<if $wolfgirl gte 6>>
			<<run _increaseBoth("Wolfy")>>
		<</if>>
		<<if $cat gte 6>>
			<<run _increaseBoth("Catlike")>>
		<</if>>
		<<if $cow gte 6>>
			<<run _increaseBoth("Bovine")>>
		<</if>>
		<<if $harpy gte 6>>
			<<run _increaseBoth("Harpy")>>
		<</if>>
		<<if $fox gte 6>>
			<<run _increaseAttractive.push("Vulpine")>>
			<<run _increaseAllure.push("Foxy")>>
		<</if>>
		<<if $angel gte 6>>
			<<run _increaseBoth("Angel")>>
		<</if>>
		<<if $fallenangel gte 2>>
			<<run _increaseBoth("Fallen angel")>>
		<</if>>
		<<if $demon gte 6>>
			<<run _increaseBoth("Demon")>>
		<</if>>
		<<if $earSlime.growth gt 50>>
			<<run _increaseAllure.push("Ear slime pheromones")>>
		<</if>>
		<<if $makeup.lipstick != 0 or $makeup.eyeshadow != 0 or $makeup.mascara != 0>>
			<<run _increaseAllure.push("Alluring makeup")>>
			<<run _increaseAttractive.push("Attractive makeup")>>
		<</if>>
		<<if $worn.head.reveal gte 50>>
			<<run _increaseAllure.push("Alluring headwear")>>
			<<run _increaseAttractive.push("Attractive headwear")>>
		<</if>>
		<<if $worn.face.reveal gte 50>>
			<<run _increaseAllure.push("Alluring face accessory")>>
			<<run _increaseAttractive.push("Attractive face accessory")>>
		<</if>>
		<<if $worn.neck.reveal gte 50>>
			<<run _increaseAllure.push("Alluring neck accessory")>>
			<<run _increaseAttractive.push("Attractive neck accessory")>>
		<</if>>
		<<if $worn.legs.reveal gte 50>>
			<<run _increaseAllure.push("Alluring legwear")>>
			<<run _increaseAttractive.push("Attractive legwear")>>
		<</if>>
		<<if $worn.feet.reveal gte 50>>
			<<run _increaseAllure.push("Alluring shoes")>>
			<<run _increaseAttractive.push("Attractive shoes")>>
		<</if>>
		<<if Weather.dayState is "night">>
			<<run _increaseAllure.push("Night")>>
		<</if>>
		<<if $exposed gte 1>>
			<<run _increaseAllure.push("Exposed")>>
		<</if>>
		<<if $liquidcount gte 1>>
			<<run _increaseAllure.push("Smell of lewd fluids")>>
		<</if>>
		<<if $liquidcount gte 10>>
			<<run _increaseAllure.push("Covered in lewd fluids")>>
		<</if>>
		<<if $liquidcount gte 30>>
			<<run _increaseAllure.push("Drenched in lewd fluids")>>
		<</if>>
		<<if Time.isBloodMoon()>>
			<<run _increaseAllure.push("Full moon")>>
		<</if>>
		<<set _negLabels = [
			{ threshold: 1000, class: "red", label: "Notorious" },
			{ threshold: 600, class: "pink", label: "Famous" },
			{ threshold: 400, class: "purple", label: "Recognised" },
			{ threshold: 200, class: "blue", label: "Known" },
			{ threshold: 100, class: "lblue", label: "Low-key" },
			{ threshold: 30, class: "teal", label: "Obscure" }
		]>>
		<<set _posLabels = [
			{ threshold: 1000, class: "green", label: "Notorious" },
			{ threshold: 600, class: "teal", label: "Famous" },
			{ threshold: 400, class: "lblue", label: "Recognised" },
			{ threshold: 200, class: "blue", label: "Known" },
			{ threshold: 100, class: "purple", label: "Low-key" },
			{ threshold: 30, class: "pink", label: "Obscure" }
		]>>
		<<set _neg = [
			{ type: "sex", name: "slut" },
			{ type: "prostitution", name: "whore" },
			{ type: "rape", name: "fucktoy" },
			{ type: "bestiality", name: $bestialitydisable is "f" ? "bitch" : "monster fucker" },
			{ type: "exhibitionism", name: "flaunter" },
			{ type: "pregnancy", name: $fame.pregnancy gte 1000 ? "broodmother" : ($fame.pregnancy gte 400 ? "breeder" : "mother") },
			{ type: "impreg", name: $fame.impreg gte 1000 ? "allfather" : ($fame.impreg gte 400 ? "sire" : "inseminator") },
		]>>
		<<set _pos = [
			{ type: "scrap", name: "scrapper" },
			{ type: "good", name: "do-gooder" },
			{ type: "business", name: "entrepreneur" },
			{ type: "social", name: $fame.social gte 1000 ? "schmoozer" : "socialite" },
			{ type: "model", name: $fame.model gte 1000 ? "show off" : "model" },
		]>>
		<<set _decreaseAllure to _pos.some(fame => (_posLabels.some(status => $fame[fame.type] >= status.threshold)))>>

		<div class="settingsHeader">Attractiveness</div>
		<div class="settingsToggleItemWide">
			<i>Attractiveness</i> measures your ability to use your looks to your advantage.
			<br>
			Rating:
			<<if $attractiveness gte 5000>>
				<span class="green">S</span>
			<<elseif $attractiveness gte 4000>>
				<span class="teal">A</span>
			<<elseif $attractiveness gte 3000>>
				<span class="lblue">B</span>
			<<elseif $attractiveness gte 2000>>
				<span class="blue">C</span>
			<<elseif $attractiveness gte 1000>>
				<span class="purple">D</span>
			<<else>>
				<span class="pink">F</span>
			<</if>>
		</div>
		<div class="settingsToggleItemWide">
			<span class="gold bold">Contributing Factors:</span>
			<br>
			<span class="green">
				<<for _item range _increaseAttractive>>
					<<= _item>>
					<br>
				<</for>>
			</span>
		</div>
	</div>
	<hr>
	<div class="settingsGrid">
		<div class="settingsHeader">Allure</div>
		<div class="settingsToggleItemWide">
			<i>Allure</i> is the dark side of attractiveness, and measures how much people will want to molest you.
			<br>
			Currently:
			<<if $allure gte 6000 * $alluremod>>
				<span class="red">You look like you need to be ravaged.</span>
			<<elseif $allure gte 4000 * $alluremod>>
				<span class="pink">You look perverted.</span>
			<<elseif $allure gte 3000 * $alluremod>>
				<span class="purple">You look lewd.</span>
			<<elseif $allure gte 2000 * $alluremod>>
				<span class="blue">You stand out.</span>
			<<elseif $allure gte 1500 * $alluremod>>
				<span class="lblue">You attract attention.</span>
			<<elseif $allure gte 1000 * $alluremod>>
				<span class="teal">You attract glances.</span>
			<<else>>
				<span class="green">You look unremarkable.</span>
			<</if>>
		</div>
		<div @class="_decreaseAllure ? 'settingsToggleItem' : 'settingsToggleItemWide'">
			<span class="gold bold">Increasing Allure:</span>
			<br>
			<span class="red">
				<<for _item range _increaseAllure>>
					<<= _item>>
					<br>
				<</for>>
			</span>
			<<if !["island"].includes($location)>>
				<<for _fame range _neg>>
					<<set _famous = _negLabels.find(status => $fame[_fame.type] >= status.threshold)>>
					<<if _famous>>
						<span @class="_famous.class"><<= _famous.label>> <<= _fame.name>></span>
						<br>
					<</if>>
				<</for>>
			<</if>>
		</div>
		<<if _decreaseAllure>>
			<div class="settingsToggleItem">
				<span class="gold bold">Decreasing Allure:</span>
				<br>
				<<if !["island"].includes("location")>>
					<<for _fame range _pos>>
						<<set _famous = _posLabels.find(status => $fame[_fame.type] >= status.threshold)>>
						<<if _famous>>
							<span @class="_famous.class"><<= _famous.label>> <<= _fame.name>></span>
							<br>
						<</if>>
					<</for>>
				<</if>>
				<<if $moorLuck gt 5>>
					<span class="green">????</span>
					<br>
				<<elseif $moorLuck gt 0>>
					<span class="lblue">????</span>
					<br>
				<</if>>
			</div>
		<</if>>
	</div>
<</widget>>

<<widget "mirrorAppearancePregnancy">>
	<<run updateMoment()>>
	You look like a <span class="lewd">pregnant <<girl>>...</span><<garousal>><<gstress>>
	<<arousal 300>><<stress 10>>
	<br><br>

	<<if getPregnancyObject().potentialFathers.length is 1>>
		<<set $_fatherName to pregnancyNameCorrection(getPregnancyObject().potentialFathers[0].source)>>
		<span class="lewd">It's clear that <<print $_fatherName === "yourself" ? "you are" : $_fatherName + " is">> the father.</span>
	<<else>>
		<span class="red">You wonder who the father is.</span>
	<</if>>
	<<set getPregnancyObject().awareOf to "mirror">>
<</widget>>

<<widget "mirrorBodywriting">>
	<<set _array to _args[0] is "visible" ? _skin_array : _hidden_writing>>
	<<for _index, _active_bodypart range _array>>
		<<if $skin[_active_bodypart].writing>>
			<<silently>><<bodypart _active_bodypart>><</silently>>
			<<= _text_output.toUpperFirst()>>:
			<<if isLoveInterest($skin[_active_bodypart].special)>>
				<<set _colour to "lewd">>>
			<<elseif $skin[_active_bodypart].special isnot "none">>
				<<set _colour to "red">>
			<<elseif $skin[_active_bodypart].lewd is 1>>
				<<set _colour to "pink">>
			<<else>>
				<<set _colour to "purple">>
			<</if>>
			<<if $skin[_active_bodypart].type is "text">>
				<span @class="_colour">"<<= $skin[_active_bodypart].writing.toUpperFirst()>>"</span>
			<<else>>
				A picture of a <span @class="_colour"><<= $skin[_active_bodypart].writing>></span>
			<</if>>
			<<if $skin[_active_bodypart].arrow is 1>>
				<<if _active_bodypart is "left_cheek" or _active_bodypart is "right_cheek">>
					and an arrow pointing to your mouth
				<<elseif _active_bodypart is "left_bottom" or _active_bodypart is "right_bottom" or _active_bodypart is "back">>
					and an arrow pointing to your anus
				<<elseif _active_bodypart is "pubic" or _active_bodypart is "left_thigh" or _active_bodypart is "right_thigh">>
					and an arrow pointing to your <<genitals true>>
				<</if>>
			<</if>>
			<<switch $skin[_active_bodypart].pen>>
				<<case "marker">>
					(written in permanent marker)
				<<case "magic">>
					(<span class="pink">seal</span>)
				<<case "tattoo" "brand">>
					(<span class="red"><<= $skin[_active_bodypart].pen>></span>)
				<<default>>
					(written in <<= $skin[_active_bodypart].pen>>)
			<</switch>>
			<<= _index lt _array.length - 1 ? "<br>" : "">>
		<</if>>
	<</for>>
<</widget>>

<<widget "visual-settings">>
	<<mirroricon>><<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
<</widget>>

<<widget "faceStyleOptions">>
	Your currently selected style is:
	<<listbox "$facestyle" autoselect>>
		<<optionsfrom setup.faceStyleOptions>>
	<</listbox>>
	<br>
	<<link "Apply">>
		<<set $facevariant to "default">>
		<<replace "#visualsFaceVariantRadios">><<faceVariantOptions>><</replace>>
		<<updatesidebarimg true>>
	<</link>>
<</widget>>

<<widget "faceVariantOptions">>
	<<if Object.keys(setup.faceVariantOptions[$facestyle]).length gt 1>>
		Your current demeanour is set to:
		<<listbox "$facevariant" autoselect>>
			<<optionsfrom setup.faceVariantOptions[$facestyle]>>
		<</listbox>>
		<br>
		<<link "Apply">>
			<<updatesidebarimg true>>
		<</link>>
	<<else>>
		There are
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			no alternative demeanours available.
			<span class="blue">
				Selecting a different face style may make additional demeanours available to you.
			</span>
		</mouse>
	<</if>>
<</widget>>

<<widget "mirrorSkin">>
	<<mirroricon>><<link "Back">><<handheldon>><<updatesidebarimg>><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>

	<div class="settingsGrid">
		<div class="settingsHeader">Skin</div>
		<div class="settingsToggleItem">
			<span class="gold bold">Tanning:</span>
			<br>
			<span id="sunscreenDescription">
				<<sunscreenDesc>>
			</span>
			<span id="sunscreenLinks">
				<<sunscreenLinks>>
			</span>
			<br>
			<label data-target="options.images" data-disabledif="V.options.images===0">
				<<checkbox "$options.tanLines" false true autocheck>> Enable tanning lines from clothing
			</label>
			<mouse class="tooltip-small linkBlue">(?)<span>Disables the visual aspect of tanning lines. Only for sidebar.</span></mouse>
		</div>
		<div class="settingsToggleItem">
			<span class="gold bold">Body Liquids:</span>
			<<if $liquidcount gt 0>>
				<<mirrorwet "neck" $player.bodyliquid.neck.semen $player.bodyliquid.neck.goo $player.bodyliquid.neck.nectar>>
				<<mirrorwet "right arm" $player.bodyliquid.rightarm.semen $player.bodyliquid.rightarm.goo $player.bodyliquid.rightarm.nectar>>
				<<mirrorwet "left arm" $player.bodyliquid.leftarm.semen $player.bodyliquid.leftarm.goo $player.bodyliquid.leftarm.nectar>>
				<<mirrorwet "thighs" $player.bodyliquid.thigh.semen $player.bodyliquid.thigh.goo $player.bodyliquid.thigh.nectar>>
				<<mirrorwet "bottom" $player.bodyliquid.bottom.semen $player.bodyliquid.bottom.goo $player.bodyliquid.bottom.nectar>>
				<<mirrorwet "tummy" $player.bodyliquid.tummy.semen $player.bodyliquid.tummy.goo $player.bodyliquid.tummy.nectar>>
				<<mirrorwet "chest" $player.bodyliquid.chest.semen $player.bodyliquid.chest.goo $player.bodyliquid.chest.nectar>>
				<<mirrorwet "face" $player.bodyliquid.face.semen $player.bodyliquid.face.goo $player.bodyliquid.face.nectar>>
				<<mirrorwet "hair" $player.bodyliquid.hair.semen $player.bodyliquid.hair.goo $player.bodyliquid.hair.nectar>>
				<<mirrorwet "feet" $player.bodyliquid.feet.semen $player.bodyliquid.feet.goo $player.bodyliquid.feet.nectar>>
				<<mirrorwet "labia" $player.bodyliquid.vaginaoutside.semen $player.bodyliquid.vaginaoutside.goo $player.bodyliquid.vaginaoutside.nectar>>
				<<mirrorwet "vagina" $player.bodyliquid.vagina.semen $player.bodyliquid.vagina.goo $player.bodyliquid.vagina.nectar>>
				<<mirrorwet "penis" $player.bodyliquid.penis.semen $player.bodyliquid.penis.goo $player.bodyliquid.penis.nectar>>
				<<mirrorwet "anus" $player.bodyliquid.anus.semen $player.bodyliquid.anus.goo $player.bodyliquid.anus.nectar>>
				<<mirrorwet "mouth" $player.bodyliquid.mouth.semen $player.bodyliquid.mouth.goo $player.bodyliquid.mouth.nectar>>
			<<else>>
				<br>
				Your skin feels <span class="green">clean</span>.
			<</if>>

		</div>
	</div>
	<hr>
	<div class="settingsGrid">
		<<bodywritingExposureCheck true true>>
		<<bodywritingHiddenCheck true true>>
		<div class="settingsHeader">Body</div>
		<<if _bodywriting_exposed is 1 and _bodywriting_hidden is 1>>
			<div class="settingsToggleItem">
				<div class="skinMenu">
					<span class="gold bold">Visible Bodywriting:</span>
					<br>
					<<mirrorBodywriting "visible">>
					<br>
				</div>
			</div>
			<div class="settingsToggleItem">
				<div class="skinMenu">
					<span class="gold bold">Hidden Bodywriting:</span>
					<br>
					<<mirrorBodywriting "hidden">>
					<br>
				</div>
			</div>
		<<elseif _bodywriting_exposed is 1 || _bodywriting_hidden is 1>>
			<div class="settingsToggleItemWide">
				<<if _bodywriting_exposed is 1>>
					<span class="gold bold">Visible Bodywriting:</span>
					<br>
					<<mirrorBodywriting "visible">>
					<br>
				<<elseif _bodywriting_hidden is 1>>
					<span class="gold bold">Hidden Bodywriting:</span>
					<br>
					<<mirrorBodywriting "hidden">>
				<</if>>
			</div>
		<</if>>

		<div class="settingsToggleItemWide">
			<<if $bodyWritingSelected is null>>
				<<unset $bodyWritingSelected>>
			<</if>>
			<<if $bodyWritingSelected isnot undefined>>
				You write
				<<if isLoveInterest($skin[$bodyPartSelected].special)>>
					"<span class="lewd"><<print $bodyWritingSelected>></span>"
				<<elseif $skin[$bodyPartSelected].special isnot "none">>
					"<span class="red"><<print $bodyWritingSelected>></span>"
				<<elseif $skin[$bodyPartSelected].lewd is 1>>
					"<span class="pink"><<print $bodyWritingSelected>></span>"
				<<else>>
					"<span class="purple"><<print $bodyWritingSelected>></span>"
				<</if>>
				on your <<bodypart $bodyPartSelected>>.
				<<unset $bodyWritingSelected>>
				<<unset $bodyPartSelected>>
				<hr>
			<</if>>

			<<bodywritingOptions>>

			/*Needs to be last*/
			<div class="mirrorContainer">
				<<bodywritingMenuLinks>>
			</div>
		</div>
		<div class="settingsToggleItemWide">
			<div class="skinMenu">
				<span class="gold bold">Body shape:</span>
				<mouse class="tooltip-small linkBlue">(?)<span>This is a cosmetic change that does not contribute towards gender appearance.</span></mouse>
				<br>
				Your chosen body shape is:
				<<set _bodyOptions to {
					"Classic": "classic",
					"Slender": "slender",
					"Curvy": "curvy"
				}>>
				<<listbox "$player.bodyshape" autoselect>>
					<<optionsfrom _bodyOptions>>
				<</listbox>>
				<br>
				<<link "Apply">>
					<<updatesidebarimg true>>
				<</link>>
			</div>
		</div>
	</div>
	<hr>
	<div class="settingsGrid">

		<div class="settingsHeader">Facial Settings</div>
		<div id="visualsFaceStyle" class="settingsToggleItem">
			<span class="gold bold">Face style:</span><br>
			<<faceStyleOptions>>
		</div>

		<div id="visualsFaceVariants" class="settingsToggleItem">
			<span class="gold bold">Demeanour:</span>
			<br>
			<div id="visualsFaceVariantRadios">
				<<faceVariantOptions>>
			</div>
		</div>
	</div>
<</widget>>

<<widget "sunscreenLinks">>
	<<if Skin.Sunscreen.isApplied()>>
		<br>
		<<cosmeticsicon "sunscreen">><<link "Remove sunscreen">>
			<<handheldon>>
			<<replace #sunscreenDescription>><<sunscreenApply "remove">><</replace>>
			<<replace #sunscreenLinks>><<sunscreenLinks>><</replace>>
		<</link>> <<note `Skin.Sunscreen.usesLeft + ' use'+(Skin.Sunscreen.usesLeft > 1 ? 's' : '') + ' left'`>>
	<<else>>
		<<if Skin.Sunscreen.usesLeft gt 0>>
			<br>
			<<cosmeticsicon "sunscreen">><<link "Apply sunscreen">>
				<<handheldon>>
				<<replace #sunscreenDescription>><<sunscreenApply>><</replace>>
				<<replace #sunscreenLinks>><<sunscreenLinks>><</replace>>
			<</link>> <<note `Skin.Sunscreen.usesLeft + ' use'+(Skin.Sunscreen.usesLeft > 1 ? 's' : '') + ' left'`>>
		<</if>>
	<</if>>
<</widget>>

<<widget "sunscreenDesc">>
	Your skin is
	<<if Skin.Sunscreen.isApplied()>>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			protected against the sun
			<span class="black">
				Sunscreen is keeping your skin from getting tanned.
				<<if Skin.Sunscreen.usesLeft is 0>>
					<br>
					<i class="blue">Sunscreen can be acquired at the shops</i>
				<</if>>
			</span>
		</mouse>
		<<set $_timeLeft to Math.floor(Skin.Sunscreen.timeLeft / 60)>>
		(<<print getTimeString($_timeLeft)>> left).
	<<else>>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			not protected against the sun.
			<span class="black">
				Your skin will tan when exposed to the sun.
				<<if Skin.Sunscreen.usesLeft is 0>>
					<br>
					<i class="blue">Sunscreen can be acquired at the cosmetics shop</i>
				<</if>>
			</span>
		</mouse>
	<</if>>
<</widget>>

<<widget "sunscreenApply">>
	<<if $leftarm isnot "bound" and $rightarm isnot "bound">>
		<<if _args[0] is "remove">>
			<<run Skin.Sunscreen.remove()>>
		<<else>>
			<<run Skin.Sunscreen.apply()>>
		<</if>>
	<</if>>
	<<if $leftarm is "bound" and $rightarm is "bound">>
		<span class="red">Both of your arms are bound</span>, and you find it difficult to do anything about your skin this way.
		<hr>
	<<elseif _args[0] is "remove">>
		<<wearProp "rag" "white">><<updatesidebarimg>>
		You scrub a damp towel over your skin, removing any last traces of sunscreen.
		<hr>
	<<else>>
		<<wearProp "sunscreen">><<updatesidebarimg>>
		You squirt a hefty dollop of sunscreen onto your hand and rub it into your skin.
		<hr>
	<</if>>
	<<sunscreenDesc>>
<</widget>>

<<widget "bodywritingOptions">>
	<<set _bodyWritingOptions to {
		General: {
		"Cute boy":"cute_boy",
		"Cute girl":"cute_girl",
		"Orphan":"orphan"
		}
	}>>

	<<if $beauty gte ($beautymax / 7) * 3>>
		<<set _bodyWritingOptions.General["Handsome"] to "handsome">>
		<<set _bodyWritingOptions.General["Pretty"] to "pretty">>
	<</if>>
	<<if $beauty gte ($beautymax / 7) * 4>>
		<<set _bodyWritingOptions.General["Stud"] to "stud">>
		<<set _bodyWritingOptions.General["Beauty"] to "beauty">>
	<</if>>
	<<if $beauty gte ($beautymax / 7) * 5>>
		<<set _bodyWritingOptions.General["Beautiful"] to "beautiful">>
	<</if>>

	<<if $trauma gte (($traumamax / 5) * 2)>>
		<<set _bodyWritingOptions.General["Daddy issues"] to "daddy_issues">>
		<<set _bodyWritingOptions.General["Mommy issues"] to "mommy_issues">>
		<<set _bodyWritingOptions.General["Trashy"] to "trashy">>
	<</if>>
	<<if $trauma gte (($traumamax / 5) * 3)>>
		<<set _bodyWritingOptions.General["Worthless"] to "worthless">>
		<<set _bodyWritingOptions.General["Oh no"] to "oh_no">>
		<<set _bodyWritingOptions.General["Dumb bitch"] to "dumb_bitch">>
	<</if>>

	<<if hasSexStat("promiscuity", 2)>>
		<<set _bodyWritingOptions.General["Hot"] to "hot">>
	<</if>>
	<<if hasSexStat("promiscuity", 3)>>
		<<set _bodyWritingOptions.Promiscuity = {}>>
		<<set _bodyWritingOptions.Promiscuity["Slut"] to "slut">>
		<<set _bodyWritingOptions.Promiscuity["Promiscuous"] to "promiscuous">>
		<<set _bodyWritingOptions.Promiscuity["Wanton"] to "wanton">>
		<<set _bodyWritingOptions.Promiscuity["D.T.F."] to "dtf">>
	<</if>>

	<<if hasSexStat("promiscuity", 4)>>
		<<set _bodyWritingOptions.Promiscuity["Insatiable slut"] to "insatiable_slut">>
		<<set _bodyWritingOptions.Promiscuity["Free Sex"] to "free_sex">>
		<<set _bodyWritingOptions.Promiscuity["Town bicycle"] to "town_bicycle">>
		<<set _bodyWritingOptions.Promiscuity["Size queen"] to "size_queen">>
		<<if $orgasmtrait gte 1>>
			<<set _bodyWritingOptions.Promiscuity["Sex addict"] to "sex_addict">>
			<<set _bodyWritingOptions.Promiscuity["Make me cum"] to "make_me_cum">>
		<</if>>
	<</if>>

	<<if hasSexStat("promiscuity", 5)>>
		<<set _bodyWritingOptions.Promiscuity["Fuck Me"] to "fuck_me">>
		<<set _bodyWritingOptions.Promiscuity["Cocksucker"] to "cocksucker">>
		<<set _bodyWritingOptions.Promiscuity["Cum dump"] to "cum_dump">>
		<<set _bodyWritingOptions.Promiscuity["Public Slut"] to "public_slut">>
		<<if $analstat gte 100>>
			<<set _bodyWritingOptions.Promiscuity["Buttslut"] to "buttslut">>
			<<set _bodyWritingOptions.Promiscuity["Anal whore"] to "anal_whore">>
		<</if>>
	<</if>>

	<<if hasSexStat("promiscuity", 3)>>
		<<set _bodyWritingOptions.Prostitution = {}>>
		<<if $trauma gte (($traumamax / 5) * 2)>>
			<<set _bodyWritingOptions.Prostitution["It's not rape if you pay me"] to "its_not_rape_if_you_pay_me">>
		<</if>>
		<<set _bodyWritingOptions.Prostitution["£5 whore"] to "five_pound_whore">>
		<<set _bodyWritingOptions.Prostitution["£10 a pop"] to "ten_pound_a_pop">>
		<<set _bodyWritingOptions.Prostitution["Slut for hire"] to "slut_for_hire">>
	<</if>>
	<<if hasSexStat("promiscuity", 4)>>
		<<set _bodyWritingOptions.Prostitution["£25 per fuck"] to "twenty_five_pound_per_fuck">>
		<<set _bodyWritingOptions.Prostitution["£100"] to "one_hundred_pound">>
		<<set _bodyWritingOptions.Prostitution["Body for sale"] to "body_for_sale">>
		<<if $trauma gte (($traumamax / 5) * 3)>>
			<<set _bodyWritingOptions.Prostitution["Stupid whore"] to "stupid_whore">>
		<<else>>
			<<set _bodyWritingOptions.Prostitution["Whore"] to "whore">>
		<</if>>
		<<set _bodyWritingOptions.Prostitution["Prostitute"] to "prostitute">>
	<</if>>
	<<if hasSexStat("exhibitionism", 3)>>
		<<set _bodyWritingOptions.Exhibitionism to {}>>
		<<set _bodyWritingOptions.Exhibitionism["Pervert"] to "pervert">>
		<<set _bodyWritingOptions.Exhibitionism["Attention whore"] to "attention_whore">>
		<<set _bodyWritingOptions.Exhibitionism["Flaunter"] to "flaunter">>
		<<set _bodyWritingOptions.Exhibitionism["Object"] to "object">>
		<<set _bodyWritingOptions.Exhibitionism["Strip me"] to "strip_me">>
		<<set _bodyWritingOptions.Exhibitionism["Ask to see me naked"] to "ask_to_see_me_naked">>
	<</if>>
	<<if hasSexStat("deviancy", 4)>>
		<<set _bodyWritingOptions.Deviancy to {}>>
		<<set _bodyWritingOptions.Deviancy["Doggy slut"] to "doggy_slut">>
		<<set _bodyWritingOptions.Deviancy["Animal"] to "animal">>
		<<set _bodyWritingOptions.Deviancy["Beast fucker"] to "beast_fucker">>
		<<set _bodyWritingOptions.Deviancy["Breedable"] to "breedable">>
		<<set _bodyWritingOptions.Deviancy["Deviant"] to "deviant">>
	<</if>>
	<<if $masochism_level gte 1>>
		<<set _bodyWritingOptions.Masochism to {}>>
		<<set _bodyWritingOptions.Masochism["Hit me"] to "hit_me">>
		<<set _bodyWritingOptions.Masochism["Hurt me"] to "hurt_me">>
		<<set _bodyWritingOptions.Masochism["Treat me bad"] to "treat_me_bad">>
		<<set _bodyWritingOptions.Masochism["Make me squeal"] to "make_me_squeal">>
	<</if>>
	<<if $submissive gte 1200>>
		<<set _bodyWritingOptions.Submission to {}>>
		<<set _bodyWritingOptions.Submission["Submissive"] to "submissive">>
		<<set _bodyWritingOptions.Submission["Pet"] to "pet">>

			<<if hasSexStat("deviancy", 3)>>
				<<set _bodyWritingOptions.Submission["Public pet"] to "public_pet">>
			<</if>>

		<<if hasSexStat("promiscuity", 4)>>
			<<set _bodyWritingOptions.Submission["Free use"] to "free_use">>
			<<set _bodyWritingOptions.Submission["Use Me"] to "use_me">>
		<</if>>

		<<if $submissive gte 1500>>
			<<set _bodyWritingOptions.Submission["Slave"] to "slave">>
			<<set _bodyWritingOptions.Submission["Enslave Me"] to "enslave_me">>
			<<set _bodyWritingOptions.Submission["Cum rag"] to "cum_rag">>
			<<if hasSexStat("promiscuity", 5)>>
				<<set _bodyWritingOptions.Submission["Fuckdoll"] to "fuckdoll">>
				<<set _bodyWritingOptions.Submission["Fucktoy"] to "fucktoy">>
				<<if $player.penisExist>>
					<<set _bodyWritingOptions.Submission["Walking dildo"] to "walking_dildo">>
				<</if>>
			<</if>>
		<</if>>
	<</if>>
	<<if ($player.vaginaExist or ($sexStats.anus.pregnancy.awareOf or $sexStats.anus.pregnancy.givenBirth gte 1)) and hasSexStat("promiscuity", 5)>>
		<<set _bodyWritingOptions.Pregnancy to {}>>
		<<set _bodyWritingOptions.Pregnancy["Brood mother"] to "brood_mother">>
		<<set _bodyWritingOptions.Pregnancy["Inseminate me"] to "inseminate_me">>
		<<set _bodyWritingOptions.Pregnancy["Impregnate me"] to "impregnate_me">>
		<<set _bodyWritingOptions.Pregnancy["Pregnancy slut"] to "pregnancy_slut">>
		<<set _bodyWritingOptions.Pregnancy["Breeding ground"] to "breeding_ground">>
	<</if>>

	<<set _bodyWritingOptions["Love Interests"] to {}>>
	<<if $robinromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Robin's Protector"] to "robins_protector">>
		<<set _bodyWritingOptions["Love Interests"]["Robin & I"] to "robin_and_i">>
		<<set _bodyWritingOptions["Love Interests"]["The Orphan Lover"] to "the_orphan_lover">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Robin's Boyfriend"] to "robins_boyfriend">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Robin's Girlfriend"] to "robins_girlfriend">>
		<</if>>
	<</if>>
	<<if $whitneyromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Whitney's Pet"] to "whitneys_pet">>
		<<set _bodyWritingOptions["Love Interests"]["Property of Whitney"] to "property_of_whitney">>
		<<set _bodyWritingOptions["Love Interests"]["Whitney's Toy"] to "whitneys_toy">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Whitney's Boyslut"] to "whitneys_boyslut">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Whitney's Slut"] to "whitneys_slut">>
		<</if>>
	<</if>>
	<<if $kylarenglish gte 1 and C.npc.Kylar.state isnot "prison">>
		<<set _bodyWritingOptions["Love Interests"]["Kylar's Obsession"] to "kylars_obsession">>
		<<set _bodyWritingOptions["Love Interests"]["Love Kylar Forever"] to "love_kylar_forever">>
		<<set _bodyWritingOptions["Love Interests"]["Reserved for Kylar"] to "reserved_for_kylar">>
		<<set _bodyWritingOptions["Love Interests"]["Just Kylar"] to "just_kylar">>
	<</if>>
	<<if $syndromeeden is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Eden's Companion"] to "edens_companion">>
		<<set _bodyWritingOptions["Love Interests"]["Hunter and Prey"] to "hunter_and_prey">>
		<<set _bodyWritingOptions["Love Interests"]["It's Lonely in the Woods"] to "its_lonely_in_the_woods">>
		<<set _bodyWritingOptions["Love Interests"]["Something is Hunting you"] to "something_is_hunting_you">>
	<</if>>
	<<if $dateCount.Avery gte 3 and C.npc.Avery.state isnot "dismissed">>
		<<set _bodyWritingOptions["Love Interests"]["Avery's Trophy"] to "averys_trophy">>
		<<set _bodyWritingOptions["Love Interests"]["Endearing"] to "endearing">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Uptown Boy"] to "uptown_boy">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Uptown Girl"] to "uptown_girl">>
		<</if>>
		<<set _bodyWritingOptions["Love Interests"]["Avery's Monopoly"] to "averys_monopoly">>
	<</if>>
	<<if $farm_stage gte 7 and $alex_countdown is undefined>>
		<<set _bodyWritingOptions["Love Interests"]["Alex's Partner"] to "alexs_partner">>
		<<set _bodyWritingOptions["Love Interests"]["Sunrise to Sunset"] to "sunrise_to_sunset">>
		<<set _bodyWritingOptions["Love Interests"]["Hay Baler"] to "hay_baler">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Cowboy"] to "cowboy">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Cowgirl"] to "cowgirl">>
		<</if>>
	<</if>>
	<<if $sydneyromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Sydney's Saviour"] to "sydneys_savior">>
		<<set _bodyWritingOptions["Love Interests"]["Bound to Sydney"] to "bound_to_sydney">>
		<<set _bodyWritingOptions["Love Interests"]["Sydney Makes Me :)"] to "sydney_makes_me_smile">>
		<<if C.npc.Sydney.purity gt 1>>
			<<set _bodyWritingOptions["Love Interests"]["Purest Love"] to "purest_love">>
		<<else>>
			<<set _bodyWritingOptions["Love Interests"]["Lusty Sinners"] to "lusty_sinners">>
		<</if>>
	<</if>>
	<<if $syndromewolves is 1 and hasSexStat("deviancy", 3)>>
		<<set _bodyWritingOptions["Love Interests"]["Black Wolf's Bitch"] to "black_wolfs_bitch">>
		<<set _bodyWritingOptions["Love Interests"]["All for my Alpha"] to "all_for_my_alpha">>
		<<if $wolfpackleader is 1>>
			<<set _bodyWritingOptions["Love Interests"]["Leader of the Pack"] to "leader_of_the_pack">>
		<</if>>
		<<set _bodyWritingOptions["Love Interests"]["Runs With Wolves"] to "runs_with_wolves">>
	<</if>>
	<<if $syndromebird is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Great Hawk's Spouse"] to "great_hawks_spouse">>
		<<set _bodyWritingOptions["Love Interests"]["Soaring With Love"] to "soaring_with_love">>
		<<set _bodyWritingOptions["Love Interests"]["Terror's Mate"] to "terrors_mate">>
		<<set _bodyWritingOptions["Love Interests"]["Free Bird"] to "free_bird">>
	<</if>>
	<<if $debug is 1>>
		<<set _bodyWritingOptions["Debug"] to setup.bodywriting>>
		<<set _debugBodywritingOptionsKeys to Object.keys(setup.bodywriting)>>
		<<link [[Wash yourself|$passage]]>>
			<<set $mirrorMenu to "skin">>
			<<wash>>
		<</link>>
		<<link [[Bind hands|$passage]]>>
			<<set $mirrorMenu to "skin">>
			<<bind>>
		<</link>>
		<br/>
		<<print Object.values(setup.bodywriting).length>> known bodywriting options.
	<</if>>
<</widget>>

<<widget "bodywritingMenuLinks">>
	<div id="bodywritingMenuLinks">
		<<set _keys to Object.keys(_bodyWritingOptions)>>
		<<if $bodywritingSet is undefined>>
			<<set $bodywritingSet to "General">>
		<</if>>
		<<for _i to 0; _i lt _keys.length; _i++>>
			<<capture _i _keys>>
				<div @id="'link-'+_keys[_i].replace(/ /g,'-')" @class="(_keys[_i] is $bodywritingSet ? 'no-numberify bodywritingSelected' : 'no-numberify bodywriting')">
				<<button _keys[_i]>>
					<<removeclass `'#link-'+$bodywritingSet.replace(/ /g,'-')` "bodywritingSelected">>
					<<addclass `'#link-'+$bodywritingSet.replace(/ /g,'-')` "bodywriting">>
					<<set $bodywritingSet to clone(_keys[_i])>>
					<<addclass `'#link-'+$bodywritingSet.replace(/ /g,'-')` "bodywritingSelected">>
					<<replace "#bodywritingMenu">><<bodywritingMenu _args[0]>><</replace>>
				<</button>>
				</div>
			<</capture>>
		<</for>>
	</div>

	<br>
	<div id="bodywritingMenu" class="skinMenu no-numberify">
		<<bodywritingMenu _args[0]>>
	</div>
	<div class="skinMenu">
		<label data-target="options.images" data-disabledif="V.options.images===0">
			<<checkbox "$options.bodywritingImages" false true autocheck>> Enable bodywriting images
		</label>
	</div>
<</widget>>

<<widget "bodywritingMenu">>
	<<if Object.keys(_bodyWritingOptions[$bodywritingSet]).length gt 0>>
		<span class="gold bold">Add Bodywriting:</span>
		<br>
		<<set _bodyPartOptions to {}>>
		<<if _args[0] isnot undefined>>
			<<set _bodyPartOptionsSkip to _args[0]>>
		<<else>>
			<<set _bodyPartOptionsSkip to ["back", "left_bottom", "right_bottom"]>>
		<</if>>
		<<for _label, _value range $skin>>
			<<if _bodyPartOptionsSkip.includes(_label)>>
				<<continue>>
			<<elseif Object.keys(_value).length is 0>>
				<<silently>><<bodypart _label>><</silently>>
				<<set _bodyPartOptions[_text_output.toUpperFirst()] to _label>>
			<</if>>
		<</for>>
		<<if $debug is 1>>
			Write
			<<listbox "_bodyWritingDebugSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			everywhere
			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<for _part, _value range $skin>>
					<<add_bodywriting _part _bodyWritingDebugSelected "pen">>
				<</for>>
			<</link>>
			<br />
			Write
			<<listbox "_bodyWritingDebugSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			everywhere where it has custom sprites


			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<for _part, _value range $skin>>
					<<if _bodyWritingDebugSelected.sprites.includes(_part)>>
						<<add_bodywriting _part _bodyWritingDebugSelected "pen">>
					<</if>>
				<</for>>
			<</link>>
			<br />
			<br />
		<</if>>

		<<if Object.keys(_bodyPartOptions).length gt 0>>
			Write
			<<listbox "_bodyWritingSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			on your
			<<listbox "_bodyPartSelected">>
				<<optionsfrom _bodyPartOptions>>
			<</listbox>>

			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<set $bodyWritingSelected to Object.keys(_bodyWritingOptions[$bodywritingSet])[Object.values(_bodyWritingOptions[$bodywritingSet]).indexOf(_bodyWritingSelected)]>>
				<<set $bodyPartSelected to _bodyPartSelected>>
				<<add_bodywriting _bodyPartSelected _bodyWritingSelected "pen">>
			<</link>>
		<<else>>
			You're not sure where else you can write an advertisement.
		<</if>>
	<<else>>
		You have not unlocked any bodywriting options for this category yet.
	<</if>>
<</widget>>

<<widget "hairDescription">>
	You check your hair in the mirror.
	<<if $hairtype is "default" and $fringetype is "default">>
	Your hair is not currently styled. Your sides are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
	Your hair
	<<if $hairgelBottles is undefined>><<set $hairgelBottles to 0>><</if>>
	<<if $earsposition is "front">>
			<span class="gold"> is tucked behind your ears</span>
	<<else>>
			<span class="gold">hangs in front of your ears</span>
	<</if>>
	and is
	<<if $ruffledisable is "t">>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			fixed in place.
			<span class="black">Your hairstyle cannot be ruined. <br> <i class="red">Selecting a new hairstyle will re-enable hair ruffling. <<print ($hairgelBottles is 0 ? "Hair gel can be acquired at the shops." : "Hair gel will need to be re-applied.")>></i></span>
		</mouse>
	<<else>>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			not fixed in place.
			<span class="black">Certain situations may change your hair to a messier style. <br> <i class="teal">You can apply hair gel to disable hair ruffling.<<print ($hairgelBottles is 0 ? " Hair gel can be acquired at the shops." : "")>></i> </span>
		</mouse>
	<</if>>
		<div class="no-numberify">
			<<link [[Randomise your hairstyle|$passage]]>>
				<<set _hairType to Object.values(_hairTypeByName)>>
				<<set $hairtype to _hairType[random(0,_hairType.length - 1)]>>
				<<set _fringeType to Object.values(_fringeTypeByName)>>
				<<set $fringetype to _fringeType[random(0,_fringeType.length - 1)]>>
				<<set $hairposition to ["front","back"][random(0,1)]>>
			<</link>>
			|
			<<switch $hairposition>>
				<<case "front">>
					<<link "Position sides behind body">>
						<<run State.setVar("$hairposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $earsposition>>
				<<case "front">>
					<<link "Position hair in front of ears">>
						<<run State.setVar("$earsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $browsposition>>
				<<case "front">>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position brows in front of hair">>
						<<run State.setVar("$browsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			<br><br>
		</div>
	<<else>>
		<<if $hairtype is "default">>
			Currently, your fringe is in the <span class="gold">$fringetype</span> style. Your sides are left <span class="gold">natural</span> and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<<elseif $fringetype is "default">>
			Currently, your fringe is left <span class="gold">natural</span>. Your sides are in the <span class="gold">$hairtype</span> style and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<<else>>
			Currently, your fringe is in the <span class="gold">$fringetype</span> style. Your sides are in the <span class="gold">$hairtype</span> style and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<</if>>
			Your hair
			<<if $hairgelBottles is undefined>><<set $hairgelBottles to 0>><</if>>
			<<if $earsposition is "front">>
				 <span class="gold"> is tucked behind your ears</span>
			<<else>>
				 <span class="gold">hangs in front of your ears</span>
			<</if>>
			and is
			<<if $ruffledisable is "t">>
				<mouse class = "gold tooltip-small" style="border-bottom-color:white">
					fixed in place.
					<span class="black">Your hairstyle cannot be ruined. <br> <i class="red">Selecting a new hairstyle will re-enable hair ruffling. <<print ($hairgelBottles is 0 ? "Hair gel can be acquired at the shops." : "Hair gel will need to be re-applied.")>></i></span>
				</mouse>
			<<else>>
				<mouse class = "gold tooltip-small" style="border-bottom-color:white">
					not fixed in place.
					<span class="black">Certain situations may change your hair to a messier style. <br> <i class="teal">You can apply hair gel to disable hair ruffling.<<print ($hairgelBottles is 0 ? " Hair gel can be acquired at the shops." : "")>></i> </span>
				</mouse>
			<</if>>
		<div class="no-numberify">
			<<link [[Randomise your hairstyle|$passage]]>>
				<<set _hairType to Object.values(_hairTypeByName)>>
				<<set $hairtype to _hairType[random(0,_hairType.length - 1)]>>
				<<set _fringeType to Object.values(_fringeTypeByName)>>
				<<set $fringetype to _fringeType[random(0,_fringeType.length - 1)]>>
				<<set $hairposition to ["front","back"][random(0,1)]>>
			<</link>>
			|
			<<switch $hairposition>>
				<<case "front">>
					<<link "Position sides behind body">>
						<<run State.setVar("$hairposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $earsposition>>
				<<case "front">>
					<<link "Position hair in front of ears">>
						<<run State.setVar("$earsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $browsposition>>
				<<case "front">>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position brows in front of hair">>
						<<run State.setVar("$browsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
		<br><br>
		</div>
	<</if>>
<</widget>>

<<widget "mirrorHair">>
	<<mirroricon>><<link "Back">><<handheldon>><<updatesidebarimg>><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<<shopClothingFilterSettingsDefault>> /* Due to reusing the traits filtering */
	<br><br>
	<div id="hairDescription">
	<<hairDescription>>
	</div>

	<div id="hairgelLinks">
		<<hairgelLinks>>
	</div>

	<br>

	<<set _hairTypeByName to {}>>
	<<run setup.hairstyles.sides.sort((a, b) => {
		if (a.name === "natural") return -1;
		if (b.name === "natural") return 1;
		return a.name.localeCompare(b.name);
	}).forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) {
			T.hairTypeByName[style.name] = style.variable;
		}
	})>>
	<<set _fringeTypeByName to {}>>
	<<run setup.hairstyles.fringe.sort((a, b) => {
		if (a.name === "natural") return -1;
		if (b.name === "natural") return 1;
		return a.name.localeCompare(b.name);
	}).forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) {
			T.fringeTypeByName[style.name] = style.variable;
		}
	})>>

	<div id="hairContainer">
		<div id="hairContainerHeader" class="no-numberify">
			<<mirrorhairdisplayLinks "hair">>
		</div>
		<<mirrorhairdisplay "$hairtype" "sides">>
	</div>
	<br><br>
<</widget>>

<<widget "hairgelLinks">>
	<div class="no-numberify">
	<<link [[($showMannequins ? "Hide" : "Show") + " Mannequins"|$passage]]>><<set $showMannequins to 1 - ($showMannequins or 0)>><</link>>
	<mouse class="tooltip-small linkBlue">(?)<span>Disable preview images for hairstyles. <i class="red">Enabling mannequins may cause performance issues on some devices.</i></span></mouse>
	<<if $hairgelBottles isnot undefined and $hairgelBottles gte 1>>
		| <<hairdressericon "gel">>
		<<if $ruffledisable is "f">>
			<<link "Apply hair gel">><<replace #hairDescription>><<hairgelApply>><</replace>><<replace #hairgelDesc>><<hairgelDesc>><</replace>><<replace#hairgelLinks>><<hairgelLinks>><</replace>><</link>>
		|
		<</if>>
		<div id="hairgelDesc" style="display:inline"><<hairgelDesc>></div>
	<</if>>
	</div>
<</widget>>

<<widget "hairgelApply">>
	<<if $leftarm isnot "bound" and $rightarm isnot "bound">>
		<<set $ruffledisable to "t">>
		<<set $hairgelBottles += -1>>
	<</if>>
	<<hairDescription>>
	<<if $leftarm is "bound" and $rightarm is "bound">>
		<span class="red">Both of your arms are bound</span>, and you find it difficult to do anything about your hair this way.
		<hr>
	<<else>>
		<<wearProp "hairgel">><<updatesidebarimg>>
		You squirt a hefty dollop of hair gel onto your hand and slick it through your hair. By the time you're finished, your hairstyle is securely in place, and the small bottle is empty. <span class="pink">If you decide to change up your hairstyle, you'll need to <<print ($hairgelBottles is 0) ? "acquire" : "apply">> more.</span>
		<hr>
	<</if>>
<</widget>>

<<widget "hairgelDesc">>
	You have <span class="gold">$hairgelBottles</span> <<print ($hairgelBottles is 1) ? "bottle" : "bottles">> of hair gel remaining.
<</widget>>

<<widget "mirrorhairdisplay">>
	<<if _hairCategory isnot _args[0]>>
		<<set _perPage to $showMannequins ? 14 : 100>>
		<<set _page to 1>>
	<</if>>
	<<set _hairCategory to _args[0]>>
	<<mirrorhairOptions _args[1]>>

	<div id="hairContainerElements">
		<<mirrorhairdisplayElements _hairOptions>>
	</div>
	<div id="hairContainerPages" class="no-numberify">
		<<mirrorhairControls _args[1]>>
	</div>
<</widget>>

<<widget "mirrorhairControls">>
	<<if $showMannequins>>
		<div id="hairContainerFooter">
			<div class="tab">
			<<if _page gt 1>>
				<<button '<span class="fa-icon fa-left"></span> Previous'>>
					<<if _page gt 1>><<set _page-->><</if>>
					<<mirrorhairOptions _args[0]>>
					<<replace "#hairContainerElements">><<mirrorhairdisplayElements _hairOptions>><</replace>>
					<<replace "#hairContainerPages">><<mirrorhairControls _args[0]>><</replace>>
				<</button>>
			<</if>>
			</div>
			<div class="tab">
			<<if _page lt _pageMax>>
				<<button 'Next <span class="fa-icon fa-right"></span>'>>
					<<if _page lt _pageMax>><<set _page++>><</if>>
					<<mirrorhairOptions _args[0]>>
					<<replace "#hairContainerElements">><<mirrorhairdisplayElements _hairOptions>><</replace>>
					<<replace "#hairContainerPages">><<mirrorhairControls _args[0]>><</replace>>
				<</button>>
			<</if>>
			</div>
			<div class="tab">
				<div id="buttonpage">
					<<button '_page/_pageMax'>>
					<</button>>
				</div>
			</div>
		</div>
	<</if>>
<</widget>>

<<widget "mirrorhairTraits">>
	<div id="hairContainerFilter">
		<div class="tab">
				<<button "<span class='fa-icon fa-check'></span> Apply">>
					<<set $shopClothingFilter.active = true>>
					<<run updateMoment()>>
				<</button>>
				<<button "<span class='fa-icon fa-reset'></span> Reset Filters">>
					<<shopClothingFilterReset>>
					<<replace "#hairContainerTraits">><<mirrorHairTraitList>><</replace>>
					<<run updateMoment()>>
				<</button>>
				<<button "<span class='fa-icon fa-selected'></span> Select/Deselect All">>
					<<run toggleAllHairTraitsFilter()>>
				<</button>>
		</div>
    </div>
<</widget>>

<<widget "mirrorhairOptions">>
	<<set _hairOptions to {}>>
	<<run setup.hairstyles[_args[0]].forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) T.hairOptions[style.name] = style.variable;
	})>>
	<<set _pageMax to Math.ceil(Object.keys(_hairOptions).length / _perPage)>>

	<<run Object.keys(_hairOptions).forEach((key, index) => {
    if (!between(index, T.perPage * (T.page - 1), (T.perPage * T.page) - 1)) {
            delete T.hairOptions[key];
        }
    })>>
<</widget>>

<<widget "mirrorhairdisplayLinks">>
	<div class="tab">
		<span @class="_args[0] is 'hair' ? 'tab-selected' : 'tab'">
			<<button "Sides">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "hair">>
					</div>
					<<mirrorhairdisplay "$hairtype" "sides">>
				<</replace>>
			<</button>>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'fringe' ? 'tab-selected' : ''">
			<<button "Fringe">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "fringe">>
					</div>
					<<mirrorhairdisplay "$fringetype" "fringe">>
				<</replace>>
			<</button>>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'style' ? 'tab-selected' : ''">
			<<button "Save/Load">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "style">>
					</div>
					<<mirrorhairdisplaySave>>
				<</replace>>
			<</button>>
			<div id="hairContainerSave" class="no-numberify">
			</div>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'filter' ? 'tab-selected' : ''">
			<<button "Filters">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "filter">>
					</div>
					<<mirrorhairdisplayFilter>>
				<</replace>>
			<</button>>
		</span>
	</div>
<</widget>>

<<widget "mirrorhairdisplayElements">>
	<div id="hairGridSides" class="no-numberify hairGrid">
		<<for _label, _hairName range _args[0]>>
			<<capture _hairCategory, _hairName>>
				<div @id="'hairGrid-' + _hairCategory.replace('$','') + '-' + _hairName.replace(/ /g,'')" @class="'gridItem' + (_hairName is V[_hairCategory.replace('$','')] ? ' selectedHair' : '')" @onclick="`wikifier('mirrorhairdisplayClick', '${T.hairCategory.replace('$','')}', '${T.hairName.replace(/ /g,'_')}');`">
					<<if $options.images is 1 and $showMannequins is 1>>
						<<selectmodel "main">>
						<<set _modeloptions.tanningEnabled to false>>
						<<set _modeloptions.skin_type = Skin.color.natural>>
						<<set _modeloptions.skin_tone = Skin.color.tan>>
						<<set _modeloptions.freckles = $player.freckles == true and $makeup.concealer != 1>>
						<<set _modeloptions.left_eye = $makeup.eyelenses.left != 0 ? $makeup.eyelenses.left : $leftEyeColour>>
						<<set _modeloptions.right_eye = $makeup.eyelenses.right != 0 ? $makeup.eyelenses.right : $rightEyeColour>>
						<<set _modeloptions.mouth to 'neutral'>>
						<<set _modeloptions.hair_colour = $haircolour>>
						<<set _modeloptions.hair_fringe_colour = $hairfringecolour>>
						<<set _modeloptions.hair_fringe_colour_gradient = $hairFringeColourGradient>>
						<<set _modeloptions.hair_fringe_colour_style = $hairFringeColourStyle>>
						<<set _modeloptions.hair_colour_gradient = $hairColourGradient>>
						<<set _modeloptions.hair_colour_style = $hairColourStyle>>
						<<set _modeloptions.hair_sides_length to $hairlengthstage>>
						<<set _modeloptions.hair_sides_position to $hairposition>>
						<<set _modeloptions.hair_fringe_length to $fringelengthstage>>
						<<if _hairCategory is "$hairtype">>
							<<set _modeloptions.hair_sides_type to _hairName>>
							<<set _modeloptions.hair_fringe_type to $fringetype>>
						<<else>>
							<<set _modeloptions.hair_fringe_type to _hairName>>
							<<set _modeloptions.hair_sides_type to $hairtype>>
						<</if>>
						<<set _modeloptions.ears_position to $earsposition>>
						<<rendermodel "hairstyleMannequin">>
						<br>
					<</if>>
					<<print toTitleCase(_label)>>
				</div>
			<</capture>>
		<</for>>
	</div>
<</widget>>

<<widget "mirrorhairdisplayClick">>
	<<if _args[0] and _args[1]>>
		<<if Object.values(_hairOptions).includes(V[_args[0]])>>
			<<set _id to "#hairGrid-" + _args[0] + "-" + V[_args[0]].replace(/ /g,"")>>
			<<removeclass _id "selectedHair">>
		<</if>>
		<<set V[_args[0]] to _args[1].replace(/_/g," ")>>
		<<set _id2 to "#hairGrid-" + _args[0] + "-" + _args[1].replace(/_/g,"")>>
		<<set $ruffledisable to "f">>
		<<addclass _id2 "selectedHair">>
		<<updatesidebarimg>>
		<<replace #hairDescription>><<hairDescription>><</replace>>
		<<replace #hairgelLinks>><<hairgelLinks>><</replace>>
	<</if>>
<</widget>>

<<widget "mirrorhairdisplaySave">>
	<div id="hairContainerHairstyle">
		<<mirrorHairSaveOptions>>
	</div>
	<div id="hairContainerSave" class="no-numberify">
		<<mirrorHairSave>>
	</div>
<</widget>>

<<widget "mirrorHairSaveOptions">>
		<<if !$savedHairStyles>>
			<<set $savedHairStyles to {
				Default: { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }
			}>>
		<</if>>
		<div class="no-numberify saveHair">
		<span class="bold">Select a hairstyle:</span>
			<hr style="border:none;margin:.25em 0">
			<<set _savedHairStylesKeys to Object.keys($savedHairStyles)>>
			<<if _savedHairStylesKeys.length gt 0>>
				<<listbox '_selectedSavedHairStyle'>>
					<<optionsfrom _savedHairStylesKeys>>
				<</listbox>>
			<</if>>
			<br>
		</div>
		<div class="no-numberify saveHair">
			<span class="bold" style="margin:.25em 0">Create a new hairstyle:</span>
			<hr style="border:none;margin:.25em 0">
			<label>Name: <<textbox "_hairStyleName" "">></label>
			<mouse class="tooltip linkBlue"> (?)<span>Saves your current hairstyle, so it may be worn later. Duplicate names will overwrite existing styles.</span></mouse>
			<span id="textbox-error"></span>
		</div>
<</widget>>


<<widget "mirrorhairdisplayFilter">>
	<div id="hairContainerTraits" class="no-numberify">
		<<mirrorHairTraitList>>
	</div>
	<div id="hairContainerFilter">
		<<mirrorhairTraits>>
	</div>
<</widget>>

<<widget "mirrorHairTraitList">>
	<<set _shopLocation to "mirrorhair">>
	<div class="hairGridTraits">
		<div class="traitCategory">
			<<set _textureTraits to ["curly", "sleek", "wavy", "textured"]>>
			<span class="gold" style="padding-left:5px">Texture:</span>
				<<for _trait range _textureTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<<set _traitObj to setup.shopDetails[_trait]>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if !_traitObj.desc>>
								<<print _traitObj.name>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _traitObj.name>>
									<span class="black"><<print _traitObj.desc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
		<div class="traitCategory">
			<span class="gold" style="padding-left:5px">Style:</span>
			<<set _styleTraits to ["braids", "buns", "pigtails", "ponytail"]>>
				<<for _trait range _styleTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<<set _traitObj to setup.shopDetails[_trait]>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if !_traitObj.desc>>
								<<print _traitObj.name>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _traitObj.name>>
									<span class="black"><<print _traitObj.desc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
		<div class="traitCategory">
			<span class="gold" style="padding-left:5px">Other</span>
			<<set _otherTraits to ["loose","short"]>>
				<<for _trait range _otherTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<<set _traitObj to setup.shopDetails[_trait]>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if !_traitObj.desc>>
								<<print _traitObj.name>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _traitObj.name>>
									<span class="black"><<print _traitObj.desc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
	</div>
<</widget>>

<<widget "mirrorHairSave">>
	<div class="hairContainerSave">
	<<if _savedHairStylesKeys.length gt 0>>
	<div class="tab">
		<<button '<span class="fa-icon fa-check"></span> Wear'>>
			<<set $hairtype to $savedHairStyles[_selectedSavedHairStyle].hairtype>>
			<<set $fringetype to $savedHairStyles[_selectedSavedHairStyle].fringetype>>
			<<set $hairposition to $savedHairStyles[_selectedSavedHairStyle].hairposition>>
			<<set $ruffledisable to "f">>
			<<updatesidebarimg>>
		<</button>>
		<<button '<span class="fa-icon fa-overwrite"></span> Overwrite'>>
			<<set $savedHairStyles[_selectedSavedHairStyle].hairtype to $hairtype>>
			<<set $savedHairStyles[_selectedSavedHairStyle].fringetype to $fringetype>>
			<<set $savedHairStyles[_selectedSavedHairStyle].hairposition to $hairposition>>
			<<updatesidebarimg>>
		<</button>>
		<<button '<span class="fa-icon fa-delete"></span> Delete'>>
			<<if _selectedSavedHairStyle isnot "Default">>
				<<run $outfit.forEach((o) => {
					if(o.hairStyle === T.selectedSavedHairStyle){
						o.hairStyle = undefined;
					}
				})>>
				<<run delete $savedHairStyles[_selectedSavedHairStyle]>>
				<<updatesidebarimg>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
		<<button '<span class="fa-icon fa-save"></span> Save'>>
			<<if _hairStyleName is "">>
				<<replace "#textbox-error">><br> <span class="red">Please enter a name.</span><</replace>>
			<<else>>
				<<replace "#textbox-error">><</replace>>
				<<set _hairStyleName to _hairStyleName.replace(/[^a-zA-Z\u4e00-\u9fa50-9_-]+/g,"").substring(0,30)>>
				<<set $savedHairStyles[_hairStyleName] to { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
	</div>
	<<else>>
	<div class="tab">
		<<button '<span class="fa-icon fa-save"></span> Save'>>
			<<if _hairStyleName is "">>
				<<replace "#textbox-error">><br> <span class="red">Please enter a name.</span><</replace>>
			<<else>>
				<<replace "#textbox-error">><</replace>>
				<<set _hairStyleName to _hairStyleName.replace(/[^a-zA-Z\u4e00-\u9fa50-9_-]+/g,"").substring(0,30)>>
				<<set $savedHairStyles[_hairStyleName] to { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
	</div>
	<</if>>
	</div>
<</widget>>


<<widget "mirrorMakeupPart">>
	<<set _itemType = _args[0]>>

	<<set _items = $makeup.owned[_itemType].filter(x => x.count > 0)>>
	<<if $makeup.owned[_itemType].length == 0>>
		<<cosmeticsicon _itemType>> You don't own any _itemType.
	<<elseif _items.length == 0>>
		You ran out of _itemType.
		<br>
	<</if>>
	<<if _items.length != 0 or $makeup[_itemType] != 0>>
		<<cosmeticsicon _itemType>>
		<span class="gold bold"><<= _itemType.toUpperFirst()>>:</span>
		<<if $makeup[_itemType] != 0>>
			<<capture _itemType>>
			<span class="no-numberify">
				<<link "Remove">>
					<<if _itemType is "eyelenses">>
						<!-- A safety check for $makeup.eyelenses -->
						<<set $makeup.eyelenses to { left: 0, right: 0 }>>
					<<else>>
						<<set $makeup[_itemType] to 0>>
					<</if>>
					<<if _itemType == 'mascara'>>
						<<set $makeup.mascara_running = 0>>
					<</if>>
					<<run Engine.show()>>
				<</link>>
			</span>
			<</capture>>
		<</if>>
		<div class="makeupList no-numberify capitalize">
			<<for _i, _item range _items>>
				<span @class="$makeup[_itemType] == _item.colour ? 'makeupWorn' : 'makeupItem'">
					<<capture _item, _itemType>>
						<<set _name to
						`_item.colour <span @class="_itemType+'-'+_item.colour.replace(/ /g, '-')"><span class="colour-sample"></span></span>
						× _item.count`>>
						<<button _name>>
							<<handheldon>>
							<<if _itemType is "lipstick">>
								<<set _colour to _item.colour is "dark red" ? "jewel red" : _item.colour is "orange" ? "tangerine" : _item.colour>>
								<<wearProp _itemType _colour>>
							<<else>>
								<<wearProp _itemType>>
							<</if>>
							<<if $makeup[_itemType] !== _item.colour>>
								<<set $makeup[_itemType] = _item.colour>>
								<<set _item.count -= 1>>
								<<if _itemType == 'mascara'>>
									<<set $makeup.mascara_running = 0>>
								<</if>>
								<<run Engine.show()>>
							<</if>>
						<</button>>
					<</capture>>
				</span>
			<</for>>
		</div>
	<</if>>
<</widget>>

<<widget "mirrorMakeup">>
	<<mirroricon>><<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	<div class="settingsGrid">
		<div class="settingsHeader">Makeup</div>
		<<set _makeup to []>>
		<<if $makeup.lipstick isnot 0>>
			<<run _makeup.push($makeup.lipstick + " lipstick")>>
		<</if>>
		<<if $makeup.eyeshadow isnot 0>>
			<<run _makeup.push($makeup.eyeshadow + " eyeshadow")>>
		<</if>>
		<<if $makeup.mascara isnot 0>>
			<<run _makeup.push($makeup.mascara + " mascara")>>
		<</if>>
		<<if $makeup.concealer is 1>>
			<<run _makeup.push("concealer")>>
		<</if>>
		<<set _makeupNames to ["lipstick","eyeshadow","mascara","browscolour","eyelenses"]>>
		<<set _makeupData to ["lipstick","eyeshadow","mascara","hairdye","eyelenses"]>>
		<<set _ownsMakeup to _makeupData.some(item => $makeup.owned[item].some(colour => colour.count > 0))>>
		<<set _removableMakeup to _makeup.length gt 1 or (_makeup.length is 1 and _makeup[0] isnot "concealer")>>

		<div class="settingsToggleItemWide">
			<<if _makeup.length gt 0>>
				You are wearing <<=_makeup.reduce( (a, b, i, array) => a + ( i < array.length - 1 ? ', ' : (array.length > 2 ? ', and ' : ' and ') ) + b)>>.
			<<else>>
				You are not wearing any makeup.
			<</if>>

			<<if _ownsMakeup or _makeup.length gt 0 or $player.freckles == true>>
				<br><br>
				Makeup:
			<</if>>
			<<if _removableMakeup>>
				<<link [[Remove all|$passage]]>>
					<<set $makeup.lipstick to 0>>
					<<set $makeup.eyeshadow to 0>>
					<<set $makeup.mascara to 0>>
					<<set $makeup.eyelenses to { left: 0, right: 0 }>>
					<<set $makeup.mascara_running to 0>>
				<</link>>
				<<if _makeup.includes("concealer")>>
					<mouse class="tooltip linkBlue">(?)<span>Will not remove concealer.</span></mouse>
				<</if>>
				 |
			<</if>>

			<<if _ownsMakeup>>
				<<link [[Randomise|$passage]]>>
					<<for _i to 0; _i lt _makeupNames.length; _i++>>
						<<set _ownedMakeup to $makeup.owned[_makeupData[_i]]>>
						<<if _makeupNames[_i] is "eyelenses">>
							<<set _rng to random(0, _ownedMakeup.length)>>
							<<set _lens to _rng is _ownedMakeup.length ? 0 : _ownedMakeup[_rng]>>
							<<set $makeup.eyelenses to { left: _lens, right: _lens }>>
						<<else>>
							<<set _rngset to []>>
							<<for _label, _value range _ownedMakeup>>
								<<if _value.count gt 0>>
									<<run _rngset.push(_label)>>
								<</if>>
							<</for>>
							<<run _rngset.push(_ownedMakeup.length)>>
							<<set _rng to _rngset[random(0, _rngset.length - 1)]>>
							<<if _rng is _ownedMakeup.length and _makeupNames[_i] is "browscolour">>
								/*Do Nothing*/
							<<elseif _rng is _ownedMakeup.length>>
								<<set $makeup[_makeupNames[_i]] to 0>>
							<<elseif _ownedMakeup[_rng].count gt 0 and $makeup[_makeupNames[_i]] isnot _ownedMakeup[_rng].colour>>
								<<set $makeup[_makeupNames[_i]] to _ownedMakeup[_rng].colour>>
								<<set _ownedMakeup[_rng].count-->>
							<</if>>
						<</if>>
					<</for>>
				<</link>>
			<</if>>
			/* CONCEALER */
			<<if $player.freckles == true>>
				<<if _ownsMakeup>>|<</if>>
				<<if $makeup.concealer == 0>>
					<<link "Hide freckles with concealer">>
						<<set $makeup.concealer = 1>>
						<<run Engine.show()>>
					<</link>>
				<<else>>
					<<link "Remove concealer">>
						<<set $makeup.concealer = 0>>
						<<run Engine.show()>>
					<</link>>
				<</if>>
			<</if>>
			<<if $makeup.presets is undefined>>
				<<set $makeup.presets to {}>>
			<</if>>
			<<if Object.keys($makeup.presets).length gt 0>>
				<br>
				Presets:
				<<for _label, _value range $makeup.presets>>
					<<capture _label>>
						<<link _label>>
							<<replace "#makeupPresets">>
								<<makeupPresets _label>>
							<</replace>>
						<</link>>
						<<if _value lt Object.keys($makeup.presets).length -1>>|<</if>>
					<</capture>>
				<</for>>
				<div id="makeupPresets"></div>
			<</if>>
		</div>
		<div class="settingsToggleItem">
			<<mirrorMakeupPart "lipstick">>
		</div>
		<div class="settingsToggleItem">
			<<mirrorMakeupPart "eyeshadow">>
		</div>
		<div class="settingsToggleItem">
			<<mirrorMakeupPart "mascara">>
		</div>
		<div class="settingsToggleItem">
			<span class="gold bold">New Makeup Preset</span>
			<br>
			Saves the makeup you currently have equipped.
			<br>
			<<textbox "_newPresetName" "">>
			<br>
			<<link [[Save preset|$passage]]>>
				<<set _newPresetName to _newPresetName.replace(/[^a-zA-Z\u4e00-\u9fa5 0-9]+/g,"")>>
				<<set $makeup.presets[_newPresetName] to {
					lipstick:clone($makeup.lipstick),
					eyeshadow:clone($makeup.eyeshadow),
					mascara:clone($makeup.mascara),
					browscolour:clone($makeup.browscolour),
					eyelenses:clone($makeup.eyelenses),
				}>>
			<</link>>
		</div>
		<<if !$simpleMirror>>
			<div class="settingsToggleItemWide">
				<<cosmeticsicon "contacts">>
				<<if $makeup.owned.eyelenses.length == 0 and $makeup.owned.custom_eyelenses.length == 0>>
					You don't own any contact lenses.
				<<else>>
					<span class="gold bold">Contact Lenses:</span>
					<<if $makeup.eyelenses.left != 0 || $makeup.eyelenses.right != 0>>
						<span class="no-numberify">
							<<link "Remove">>
								<<set $makeup.eyelenses = { left: 0, right: 0 }>>
								<<run Engine.show()>>
							<</link>>
						</span>
						<br>
						You are wearing
						<<if $makeup.eyelenses.left is $makeup.eyelenses.right>>
							<<= $makeup.eyelenses.left>> contacts.
						<<elseif $makeup.eyelenses.left != 0 and  $makeup.eyelenses.right != 0>>
							<<= $makeup.eyelenses.left>> contacts in your left eye and <<= $makeup.eyelenses.right>> contacts in your right eye.
						<<else>>
							<<set _lens to $makeup.eyelenses.left != 0 ? $makeup.eyelenses.left : $makeup.eyelenses.right>>
							<<set _eye to $makeup.eyelenses.left != 0 ? "left" : "right">>
							<<= _lens>> contacts in your <<= _eye>> eye. Your  <<= _eye is "left" ? "right" : "left">> eye is your natural <<= _eye is "left" ? $rightEyeColour : $leftEyeColour>> colour.
						<</if>>
					<<else>>
						<br>
						You are not wearing any contact lenses.
					<</if>>
					<br><br>

					Put contacts in:
					<label><<radiobutton "_contact_eye_selected" "Both" checked>> Both eyes</label> |
					<label><<radiobutton "_contact_eye_selected" "Left eye">> Left eye</label> |
					<label><<radiobutton "_contact_eye_selected" "Right eye">> Right eye</label>
					<br>
					<div class="makeupList no-numberify capitalize">
						<<for _i, _colour range $makeup.owned.eyelenses>>
							<<switch _contact_eye_selected>>
								<<default>><<set _eye to "left">>
							<</switch>>
							<span class="makeupItem">
								<<capture _colour>>
									<<set _contactName to
									`_colour <span @class="'eye-'+_colour.replace(/ /g, '-')"><span class="colour-sample bgcolour-eyes left-"></span></span>`>>

									<<button _contactName>>
										<<handheldon 1>>
										<<if _contact_eye_selected == "Both">>
											<<set $makeup.eyelenses = { left: _colour, right: _colour }>>
										<<elseif _contact_eye_selected == "Left eye">>
											<<set $makeup.eyelenses.left = _colour>>
										<<elseif _contact_eye_selected == "Right eye">>
											<<set $makeup.eyelenses.right = _colour>>
										<</if>>
										<<run Engine.show()>>
									<</button>>
								<</capture>>
							</span>
						<</for>>
						/* I wish a fiery death on whoever made the custom contacts */
						<<for _i = 0; _i < $makeup.owned.custom_eyelenses.length; _i++>>
							<<run _colour = $makeup.owned.custom_eyelenses[_i]>>
							<<for _e = 0; _e < $custom_eyecolours.length; _e++>>
								<<if $custom_eyecolours[_e].variable == $makeup.owned.custom_eyelenses[_i]>>
									<<set _background_colour to clone($custom_eyecolours[_e].canvasfilter.blend)>>
								<</if>>
							<</for>>
							<span class="makeupItem">
								<<capture _colour _background_colour>>
									<<set _colourSpaced to window.colorNameTranslate(_colour, "spaced name")>>
									<<set _customName to
									`_colourSpaced [C] <span class="eye-custom"><span @style="'background:'+_background_colour" class="colour-sample"></span></span>`>>

									<<button _customName>>
										<<if _contact_eye_selected == "Both">>
											<<set $makeup.eyelenses = { left:_colour, right:_colour }>>
										<<elseif _contact_eye_selected == "Left eye">>
											<<set $makeup.eyelenses.left = _colour>>
										<<elseif _contact_eye_selected == "Right eye">>
											<<set $makeup.eyelenses.right = _colour>>
										<</if>>
										<<run Engine.show()>>
									<</button>>
								<</capture>>
							</span>
						<</for>>

					</div>
				<</if>>
			</div>
			/* WHY IS THIS IN THE BEDROOM AND NOT THE BATHROOM WITH THE PUBIC HAIR DYE? WHY IS IT SAVED WITH MAKEUP PRESETS? */
			<div class="settingsToggleItemWide">
				<<cosmeticsicon "dyes">>
				<<set _dyes = $makeup.owned.hairdye.filter(x => x.count > 0)>>
				<<if _dyes.length == 0>>
					You have no hair dye to dye your eyebrows with.
				<<else>>
					<span class="gold bold">Eyebrow Colour:</span>
					<br>
					<<if $mirror_eyebrow_dye is true>>
						<<handheldon 1>>
						<<wearProp "hairdye">>
						<<unset $mirror_eyebrow_dye>>
						You open up the box with <<= setup.colours.hair_map[$browsDyeOption].name>> dye and prepare the mixture. Using a small brush, you carefully apply the dye to your eyebrows. You wait several minutes for the dye to set and hope you didn't mess up anything.
						<<set $makeup.owned.hairdye.find(x => x.colour == $browsDyeOption).count -= 1>><<set $makeup.browscolour = $browsDyeOption>><<unset $browsDyeOption>>
						<hr>
					<</if>>

					<<if $makeup.browscolour != 0>>
						Your brows are coloured with <<hairmapcolourtext $makeup.browscolour>> hair dye. Visit a hairdresser to restore them to their natural <<hairmapcolourtext $naturalhaircolour>> colour.
					<<else>>
						Your brows are their natural <<hairmapcolourtext $naturalhaircolour>> colour.
					<</if>>
					<br><br>
					Dying your eyebrows will take <span class="gold">0:15</span> minutes.
					<br>
					<div class="makeupList no-numberify capitalize">
						<<for _i to 0; _i lt _dyes.length; _i++>>
							<<if $makeup.browscolour is _dyes[_i].colour or $naturalhaircolour is _dyes[_i].colour>>
								<<continue>>
							<</if>>
							<<set _displayName = (_dyes[_i].colour in setup.colours.hair_map ? setup.colours.hair_map[_dyes[_i].colour].name : _dyes[_i].colour.charAt(0).toUpperCase() + _dyes[_i].colour.slice(1)) + " ×" + _dyes[_i].count + " ">>
							<<set _dyeName to _displayName + `<span @class="'hair-' + _dyes[_i].colour.replace(/ /g, '-')"><span class="colour-sample bgcolour-hair colour-hair"></span>`>>
							<<capture _dyes, _i>>
								<<button _dyeName>>
									<<set $mirror_eyebrow_dye to true>><<pass 15>>
									<<set $browsDyeOption to _dyes[_i].colour>>
									<<run Engine.show()>>
								<</button>>
							<</capture>>
						<</for>>
					</div>
				<</if>>
			</div>
		<</if>>
	</div>
<</widget>>

<<widget "makeupPresets">>
	<<set _presetChosen to $makeup.presets[_args[0]]>>
	Preset: <<print _args[0]>>
	<br>
	<<for $_label, $_value range _presetChosen>>
		<<switch $_label>>
			<<case "browscolour">>
				Eyebrow Dye: <<makeupPresetsItem "hairdye" $_value>>
			<<case "lipstick">>
				Lipstick: <<makeupPresetsItem $_label $_value>>
			<<case "eyeshadow">>
				Eyeshadow: <<makeupPresetsItem $_label $_value>>
			<<case "mascara">>
				Mascara: <<makeupPresetsItem $_label $_value>>
			<<case "eyelenses">>
				Contact Lenses: <<makeupPresetsItem $_label $_value>>
		<</switch>>
		<br>
	<</for>>
	<br>
	<<link [[Apply preset makeup|$passage]]>>
		<<for $_makeupName range _makeupNames>>
			<<set _preset to _presetChosen[$_makeupName]>>
			<<if $_makeupName is "eyelenses">>
				<<if _preset.left is 0 and _preset.right is 0>>
					<<set $makeup.eyelenses to { left:0, right:0 }>>
				<<elseif $makeup.owned.eyelenses.includes(_preset.left) and $makeup.owned.eyelenses.includes(_preset.right)>>
					<<set $makeup.eyelenses to _preset>>
				<<elseif $makeup.owned.custom_eyelenses.includes(_preset.left) and $makeup.owned.custom_eyelenses.includes(_preset.right)>>
					<<set $makeup.eyelenses to _preset>>
				<</if>>
			<<elseif _preset is 0 and $_makeupName is "hairdye">>
				/*Do Nothing*/
			<<elseif _preset is 0>>
				<<set $makeup[$_makeupName] to 0>>
			<<else>>
				<<set $_makeupName2 to ($_makeupName is "browscolour" ? "hairdye" : $_makeupName)>>
				<<set $_target to $makeup.owned[$_makeupName2].find(invMakeup => invMakeup.colour is _preset and invMakeup.colour isnot $makeup[$_makeupName] and invMakeup.count gt 0)>>
				<<if $_target>>
					<<set $makeup[$_makeupName] to clone($_target.colour)>>
					<<set $_target.count-->>
				<</if>>
			<</if>>
		<</for>>
	<</link>> |
	<<link [[Delete preset|$passage]]>>
		<<run delete $makeup.presets[_args[0]]>>
	<</link>>
<</widget>>

<<widget "makeupPresetsItem">>
	<<if _args[0] isnot undefined and _args[1] isnot undefined>>
		<<if _args[1] is 0 and _args[0] is "hairdye">>
			<span class="green">Natural</span>
		<<elseif _args[1] is 0>>
			None
		<<else>>
			<<if _args[0] is "eyelenses">>
				<<if _args[1].left == 0 && _args[1].right == 0>>
					None
				<<elseif _args[1].left == _args[1].right>>
					<span class="green"><<print _args[1].left.toUpperFirst()>> (Owned)</span>
				<<else>>
					<span class="green"><<print _args[1].left.toUpperFirst() + "(Left), " + _args[1].right.toUpperFirst()+" (Right)">></span>
				<</if>>
			<<else>>
				<<for $_i to 0; $_i lt $makeup.owned[_args[0]].length; $_i++>>
					<<if $makeup.owned[_args[0]][$_i].colour is _args[1]>>
						<<if $makeup.owned[_args[0]][$_i].count gt 0>>
							<span class="green"><<print _args[1].toUpperFirst()>> (<<print "×"+$makeup.owned[_args[0]][$_i].count>>)</span>
						<<else>>
							<span class="red"><<print _args[1].toUpperFirst()>> (× 0)</span>
						<</if>>
						<<break>>
					<</if>>
				<</for>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "browsColourPreview">>
	<span id="browsColourPreview">
	<<if $browsDyeOption isnot "noChange">>
		<span @class="'hair-' + $browsDyeOption.replace(/ /g, '-')">
			<span class="colour-sample bgcolour-hair colour-hair"></span>
		</span>
		<br><<link [[Dye eyebrows (0:15)|$passage]]>><<set $mirror_eyebrow_dye to true>><<pass 15>><</link>>
	<</if>>
	</span>
<</widget>>

<<widget "mirrorTransformation">>
	<<mirroricon>><<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<<set _angel to $transformationParts.angel>>
	<<set _fallen to $transformationParts.fallenAngel>>
	<<set _demon to $transformationParts.demon>>
	<<set _cat to $transformationParts.cat>>
	<<set _cow to $transformationParts.cow>>
	<<set _wolf to $transformationParts.wolf>>
	<<set _bird to $transformationParts.bird>>
	<<set _fox to $transformationParts.fox>>
	<<set _traits to $transformationParts.traits>>
	<<set _divine to ["angel", "fallen", "demon"].find(tf => V[tf] > 1)>>
	<<set _animal to ["cat", "cow", "wolfgirl", "harpy", "fox"].find(tf => V[tf] > 1)>>
	<div class="settingsGrid">
		<div class="settingsHeader">Transformations</div>
		<div class="settingsToggleItemWide">
			Hiding parts of your Inner Self lowers your attractiveness, but will also slowly increase your Trauma over time. <<if ["wolfgirl", "harpy", "fox"].includes(_animal)>>Pubes, pits, and cheeks can be hidden without affecting your attractiveness or incurring Trauma.<</if>> If your Trauma gets too high, you will be unable to hide.
		</div>
		<<if _divine>>
			<div @class="_animal ? 'settingsToggleItem' : 'settingsToggleItemWide'">
				<<tficon _divine>> <span class="gold bold">Divine: <<= _divine is "fallen" ? "Fallen Angel" : _divine.toUpperFirst()>></span>
				<<if $angel gt 1>>
					<<if _angel.halo isnot "disabled">>
						<div class='tf-part-item'>
							Halo:
							<<listbox "_angel.halo" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Traditional" "traditional">>
							<</listbox>>
						</div>
					<</if>>
					<<if _angel.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_angel.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Classic" "classic">>
							<</listbox>>
						</div>
					<</if>>
				<<elseif $fallenangel gt 1>>
					<<if _fallen.halo isnot "disabled">>
						<div class='tf-part-item'>
							Halo:
							<<listbox "_fallen.halo" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Traditional" "traditional">>
							<</listbox>>
						</div>
					<</if>>
					<<if _fallen.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<if $fallenangel gte 4>>
								<<listbox "_fallen.wings" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
									<<option "Classic" "classic">>
									<<option "Feathered" "fallenplus">>
									<<option "Classic Feathered" "classicfallenplus">>
								<</listbox>>
							<<else>>
								<<listbox "_fallen.wings" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
									<<option "Classic" "classic">>
								<</listbox>>
							<</if>>
						</div>
					<</if>>
				<<elseif $demon gt 1>>
					<<if _demon.horns isnot "disabled">>
						<div class='tf-part-item'>
							Horns:
							<<listbox "_demon.horns" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Classic" "classic">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.horns_colour">>
						</div>
					<</if>>
					<<if _demon.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_demon.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.wings_colour">>
						</div>
					<</if>>
					<<if _demon.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_demon.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Classic" "classic">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.tail_colour">>
						</div>
					<</if>>
					<<if $demon gte 4>>
						<div class='tf-part-item'>
							<<if hasSexStat("exhibitionism", 6)>>
								Flaunting when exposed:
								<<listbox "_traits.flaunting" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
								<</listbox>>
								<<ind>>
							<<else>>
								<span class="black">Flaunting (requires higher exhibitionism):</span>
								<<listbox "_traits.flaunting" autoselect>>
									<<option "Hide" "hidden">>
								<</listbox>>
								<<ind>>
							<</if>>
						</div>
					<</if>>
				<</if>>
			</div>
		<</if>>

		<<if _animal>>
			<div @class="_divine ? 'settingsToggleItem' : 'settingsToggleItemWide'">
				<span class="gold bold"><<tficon _animal>>Animal: <<= _animal is "harpy" ? "Bird" : _animal is "wolfgirl" ? "Wolf" : _animal.toUpperFirst()>></span>
				<<if $cat gt 1>>
					<<if _cat.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_cat.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cat.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_cat.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cat.heterochromia isnot "disabled">>
						<div class='tf-part-item'>
							Heterochromia:
							<<listbox "_cat.heterochromia" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
				<</if>>
				<<if $cow gt 1>>
					<<if _cow.horns isnot "disabled">>
						<div class='tf-part-item'>
							Horns:
							<<listbox "_cow.horns" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cow.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_cow.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Spotted black" "spotted black">>
								<<option "Spotted brown" "spotted brown">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cow.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_cow.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Black" "black">>
							<</listbox>>
						</div>
					<</if>>
				<</if>>
				<<if $wolfgirl gt 1>>
					<<if _wolf.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_wolf.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_wolf.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.cheeks isnot "disabled">>
						<div class='tf-part-item'>
							Cheeks:
							<<listbox "_wolf.cheeks" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.pubes isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pubes:
							<<listbox "_wolf.pubes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.pits isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pits:
							<<listbox "_wolf.pits" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
				<</if>>
				<<if $harpy gt 1>>
					<<if _bird.eyes isnot "disabled">>
						<div class='tf-part-item'>
							Eyes:
							<<listbox "_bird.eyes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.malar isnot "disabled">>
						<div class='tf-part-item'>
							Malar Stripes:
							<<listbox "_bird.malar" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.plumage isnot "disabled">>
						<div class='tf-part-item'>
							Plumage:
							<<listbox "_bird.plumage" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_bird.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_bird.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.pubes isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pubes:
							<<listbox "_bird.pubes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
				<</if>>
				<<if $fox gt 1>>
					<<if _fox.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_fox.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _fox.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_fox.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _fox.cheeks isnot "disabled">>
						<div class='tf-part-item'>
							Cheeks:
							<<listbox "_fox.cheeks" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
				<<set $_chimeraOptions to {
					"demoncat_tail" : !["disabled", "hidden"].includesAny(_demon.tail, _cat.tail),
					"demonharpy_wings" : !["disabled", "hidden"].includesAny(_demon.wings, _bird.wings)
				}>>
				<<set $_chimeraEnabled to Object.values($_chimeraOptions).some(o => o) ? "" : " hide">>
				<div @class="'chimera' + $_chimeraEnabled">
					__Chimera__
					<<if $_chimeraOptions.demoncat_tail>>
						/* Using demon cat chimera tail. */
						<div class='tf-part-item'>
							Demon cat tail:
							<<listbox "$chimera.demoncat.tail" autoselect>>
								<<option "Show" true>>
								<<option "Hide" false>>
							<</listbox>>
						</div>
					<</if>>
					<<if $_chimeraOptions.demonharpy_wings>>
						/* Using demon harpy chimera wings. */
						<div class='tf-part-item'>
							Demon harpy wings:
							<<listbox "$chimera.demonharpy.wings" autoselect>>
								<<option "Show" true>>
								<<option "Hide" false>>
							<</listbox>>
						</div>
					<</if>>
				</div>
			</div>
		<</if>>
		<<if !["demon", "cow"].every(transform => T[transform].horns is "disabled") || !["demon", "cat", "cow", "wolf", "bird", "fox"].every(transform => T[transform].tail is "disabled") || !["angel", "fallen", "demon", "bird"].every(transform => T[transform].wings is "disabled")>>
			<div class="settingsToggleItemWide no-numberify">
				<span class="gold bold">Layer Adjustments:</span>
				<br>			<div class="no-numberify">
				<<if !["demon", "cow"].every(transform => T[transform].horns is "disabled")>>
					<<switch $hornslayer>>
						<<case "front">>
							<<link "Prioritise headwear over horns">>
								<<run State.setVar("$hornslayer", "back")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<case "back">>
							<<link "Prioritise horns over headwear">>
								<<run State.setVar("$hornslayer", "front")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<default>>
							<<link "Prioritise horns over headwear">>
								<<run State.setVar("$hornslayer", "front")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
				<<if !["demon", "cat", "cow", "wolf", "bird", "fox"].every(transform => T[transform].tail is "disabled")>>
					<<switch $taillayer>>
						<<case "front">>
							<<link "Push tail back">>
								<<run State.setVar("$taillayer", "back")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<case "back">>
							<<link "Move tail forward">>
								<<run State.setVar("$taillayer", "front")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<default>>
							<<link "Push tail back">>
								<<run State.setVar("$taillayer", "back")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
				<<if !["angel", "fallen", "demon", "bird"].every(transform => T[transform].wings is "disabled")>>
					<<switch $wingslayer>>
						<<case "front">>
							<<link "Push wings behind">>
								<<run State.setVar("$wingslayer", "back")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<case "back">>
							<<link "Move wings forward">>
								<<run State.setVar("$wingslayer", "front")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
						<<default>>
							<<link "Push wings behind">>
								<<run State.setVar("$wingslayer", "back")>>
								<<run Engine.show()>>
								<<updatesidebarimg true>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
			</div>
		<</if>>
		<div class="mainButton">
			<<button [[Confirm|$passage]]>>
				<<set $mirrorMenu to "transformation">>
				<<if $transformationParts.cat.heterochromia is "hidden">>
					<<catHeterochromiaTF "hide">>
				<<elseif $cat gte 7 and $cat lte 10>>
					<<catHeterochromiaTF `$cat - 7`>>
				<</if>>
			<</button>>
		</div>
		<<if _isMenuEnabled>>
			<details class="expandMenu">
				<summary class="expandMenu">Custom Colours</summary>
				<div class="menuWarning">
					You haven't chosen any transformation parts! Select the checkboxes for the parts you'd like to recolour.
				</div>
				<div class="menuContent hidden">
					<<set _options to ['ffffff', 'ff0000', '00ff00', '0000ff', '590099', '000000']>>
					<<gencoloursquares _options>>
					<<gencolourpicker>>
				</div>
			</details>
		<</if>>
	</div>

	<!-- Attach an event to every listbox item to update the PC on the sidebar. -->
	<<script>>
	jQuery('.passage').on('change', 'select.macro-listbox', function (e) {
		Wikifier.wikifyEval('<<updatesidebarimg true>>');
	});
	<</script>>
<</widget>>
